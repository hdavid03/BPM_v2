
BPM_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00802000  00001ed0  00001f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000124  00802022  00802022  00001f86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00001ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ce0d  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b0a  00000000  00000000  0000f20d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006514  00000000  00000000  00013d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015b8  00000000  00000000  0001a22c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003129c  00000000  00000000  0001b7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004523  00000000  00000000  0004ca80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  00050fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b776  00000000  00000000  000512d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
       6:	00 00       	nop
       8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
       a:	00 00       	nop
       c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
       e:	00 00       	nop
      10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
      12:	00 00       	nop
      14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
      16:	00 00       	nop
      18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
      1e:	00 00       	nop
      20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
      22:	00 00       	nop
      24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
      26:	00 00       	nop
      28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
      2e:	00 00       	nop
      30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
      32:	00 00       	nop
      34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
      36:	00 00       	nop
      38:	a8 c4       	rjmp	.+2384   	; 0x98a <__vector_14>
      3a:	00 00       	nop
      3c:	d3 c4       	rjmp	.+2470   	; 0x9e4 <__vector_15>
      3e:	00 00       	nop
      40:	fe c4       	rjmp	.+2556   	; 0xa3e <__vector_16>
      42:	00 00       	nop
      44:	29 c5       	rjmp	.+2642   	; 0xa98 <__vector_17>
      46:	00 00       	nop
      48:	54 c5       	rjmp	.+2728   	; 0xaf2 <__vector_18>
      4a:	00 00       	nop
      4c:	7f c5       	rjmp	.+2814   	; 0xb4c <__vector_19>
      4e:	00 00       	nop
      50:	aa c5       	rjmp	.+2900   	; 0xba6 <__vector_20>
      52:	00 00       	nop
      54:	d5 c5       	rjmp	.+2986   	; 0xc00 <__vector_21>
      56:	00 00       	nop
      58:	00 c6       	rjmp	.+3072   	; 0xc5a <__vector_22>
      5a:	00 00       	nop
      5c:	2b c6       	rjmp	.+3158   	; 0xcb4 <__vector_23>
      5e:	00 00       	nop
      60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
      62:	00 00       	nop
      64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
      66:	00 00       	nop
      68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
      6e:	00 00       	nop
      70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
      72:	00 00       	nop
      74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
      76:	00 00       	nop
      78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
      7e:	00 00       	nop
      80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
      82:	00 00       	nop
      84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
      86:	00 00       	nop
      88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
      8e:	00 00       	nop
      90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
      92:	00 00       	nop
      94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
      96:	00 00       	nop
      98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f6 c2       	rjmp	.+1516   	; 0x68a <__vector_39>
      9e:	00 00       	nop
      a0:	26 c3       	rjmp	.+1612   	; 0x6ee <__vector_40>
      a2:	00 00       	nop
      a4:	56 c3       	rjmp	.+1708   	; 0x752 <__vector_41>
      a6:	00 00       	nop
      a8:	86 c3       	rjmp	.+1804   	; 0x7b6 <__vector_42>
      aa:	00 00       	nop
      ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ea c7       	rjmp	.+4052   	; 0x1092 <__vector_47>
      be:	00 00       	nop
      c0:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_48>
      c4:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__vector_49>
      c8:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_50>
      cc:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__vector_51>
      d0:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__vector_52>
      d4:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_53>
      d8:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__vector_54>
      dc:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__vector_55>
      e0:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__vector_56>
      e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
      fe:	00 00       	nop
     100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
     102:	00 00       	nop
     104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
     106:	00 00       	nop
     108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
     10e:	00 00       	nop
     110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
     112:	00 00       	nop
     114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
     116:	00 00       	nop
     118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ee c1       	rjmp	.+988    	; 0x4fa <__vector_71>
     11e:	00 00       	nop
     120:	1e c2       	rjmp	.+1084   	; 0x55e <__vector_72>
     122:	00 00       	nop
     124:	4e c2       	rjmp	.+1180   	; 0x5c2 <__vector_73>
     126:	00 00       	nop
     128:	7e c2       	rjmp	.+1276   	; 0x626 <__vector_74>
     12a:	00 00       	nop
     12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
     12e:	00 00       	nop
     130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
     132:	00 00       	nop
     134:	ec c5       	rjmp	.+3032   	; 0xd0e <__vector_77>
     136:	00 00       	nop
     138:	17 c6       	rjmp	.+3118   	; 0xd68 <__vector_78>
     13a:	00 00       	nop
     13c:	42 c6       	rjmp	.+3204   	; 0xdc2 <__vector_79>
     13e:	00 00       	nop
     140:	6d c6       	rjmp	.+3290   	; 0xe1c <__vector_80>
     142:	00 00       	nop
     144:	98 c6       	rjmp	.+3376   	; 0xe76 <__vector_81>
     146:	00 00       	nop
     148:	c3 c6       	rjmp	.+3462   	; 0xed0 <__vector_82>
     14a:	00 00       	nop
     14c:	ee c6       	rjmp	.+3548   	; 0xf2a <__vector_83>
     14e:	00 00       	nop
     150:	19 c7       	rjmp	.+3634   	; 0xf84 <__vector_84>
     152:	00 00       	nop
     154:	44 c7       	rjmp	.+3720   	; 0xfde <__vector_85>
     156:	00 00       	nop
     158:	6f c7       	rjmp	.+3806   	; 0x1038 <__vector_86>
     15a:	00 00       	nop
     15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
     15e:	00 00       	nop
     160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
     162:	00 00       	nop
     164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
     166:	00 00       	nop
     168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
     16e:	00 00       	nop
     170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
     172:	00 00       	nop
     174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
     176:	00 00       	nop
     178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
     17e:	00 00       	nop
     180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
     182:	00 00       	nop
     184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
     186:	00 00       	nop
     188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
     18e:	00 00       	nop
     190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
     192:	00 00       	nop
     194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
     196:	00 00       	nop
     198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_108>
     1b4:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_109>
     1b8:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_110>
     1bc:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_111>
     1c0:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_112>
     1c4:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__vector_113>
     1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__vector_119>
     1e0:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__vector_120>
     1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	23 c0       	rjmp	.+70     	; 0x23c <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	21 c0       	rjmp	.+66     	; 0x23c <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e0 ed       	ldi	r30, 0xD0	; 208
     214:	fe e1       	ldi	r31, 0x1E	; 30
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a2 32       	cpi	r26, 0x22	; 34
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	21 e2       	ldi	r18, 0x21	; 33
     228:	a2 e2       	ldi	r26, 0x22	; 34
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a6 34       	cpi	r26, 0x46	; 70
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	6f d0       	rcall	.+222    	; 0x316 <main>
     238:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <_exit>

0000023c <__bad_interrupt>:
     23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <adc_setup>:
};

void adc_setup()
{
	// disable adc before writing the configuration
	adc_disable(&ADCA);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	92 e0       	ldi	r25, 0x02	; 2
     242:	35 d1       	rcall	.+618    	; 0x4ae <adc_disable>
	
	// write configuration in to registers
	adc_write_configuration(&ADCA, &conf);
     244:	64 e0       	ldi	r22, 0x04	; 4
     246:	70 e2       	ldi	r23, 0x20	; 32
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	92 e0       	ldi	r25, 0x02	; 2
     24c:	e6 d2       	rcall	.+1484   	; 0x81a <adc_write_configuration>
	adcch_write_configuration(&ADCA, ADC_CH0, &ch_conf);
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	50 e2       	ldi	r21, 0x20	; 32
     252:	61 e0       	ldi	r22, 0x01	; 1
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	4a c3       	rjmp	.+1684   	; 0x8ee <adcch_write_configuration>
     25a:	08 95       	ret

0000025c <setup_48MHz_12MHz_clock>:
#define CONFIG_SYSCLK_PSBCDIV				SYSCLK_PSBCDIV_1_2
*/

void setup_48MHz_12MHz_clock(void)
{
	CCP=0xD8;    // Enable the clock source
     25c:	88 ed       	ldi	r24, 0xD8	; 216
     25e:	84 bf       	out	0x34, r24	; 52
	OSC.XOSCCTRL = XOSC_RANGE_12TO16|7; // select frequ range for 16MHz external XOSC
     260:	e0 e5       	ldi	r30, 0x50	; 80
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	97 ec       	ldi	r25, 0xC7	; 199
     266:	92 83       	std	Z+2, r25	; 0x02

	CCP=0xD8;    // Enable the clock source
     268:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_XOSCEN_bm; // enable XOSC enable
     26a:	88 e0       	ldi	r24, 0x08	; 8
     26c:	80 83       	st	Z, r24
	while ((OSC.STATUS & OSC_XOSCRDY_bm)==0) {} // wait for it to become stable
     26e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
     272:	83 ff       	sbrs	r24, 3
     274:	fc cf       	rjmp	.-8      	; 0x26e <setup_48MHz_12MHz_clock+0x12>

	OSC.PLLCTRL = PLL_SRC_XOSC | CONFIG_PLL0_MUL ; // 0x20 = PLLDIV (PPLL input: XOSC, PLLDIV: 3: -> frequ = 3*16 = 48 MHz)
     276:	e0 e5       	ldi	r30, 0x50	; 80
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	83 ec       	ldi	r24, 0xC3	; 195
     27c:	85 83       	std	Z+5, r24	; 0x05

	OSC.CTRL |= OSC_PLLEN_bm ; // enable the PLL...
     27e:	80 81       	ld	r24, Z
     280:	80 61       	ori	r24, 0x10	; 16
     282:	80 83       	st	Z, r24
	while( (OSC.STATUS & OSC_PLLRDY_bm) == 0 ){} // wait until it's stable
     284:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
     288:	84 ff       	sbrs	r24, 4
     28a:	fc cf       	rjmp	.-8      	; 0x284 <setup_48MHz_12MHz_clock+0x28>

	CCP=0xD8;
     28c:	88 ed       	ldi	r24, 0xD8	; 216
     28e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_PLL_gc;	// The System clock source is now  PLL (48 MHz/PSADIV_1, )
     290:	84 e0       	ldi	r24, 0x04	; 4
     292:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     296:	65 e0       	ldi	r22, 0x05	; 5
     298:	81 e4       	ldi	r24, 0x41	; 65
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <ccp_write_io>
     2a0:	08 95       	ret

000002a2 <TCC0_Setup>:
uint16_t PWM_TH = 0;    // THpwm = PWM_Time*Tclk
#define set_pwm(pwm) {if(pwm > PWM_PERIOD) {pwm = PWM_PERIOD;} else {tc_write_cc(&TCC0, TC_CCC, pwm);}}

void TCC0_Setup(void);
void TCC0_Setup(void)
{
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
	TCC0.CTRLA = DIV4;	//prescaler 4, fclk = 12MHz/4 = 3 MHz
     2a6:	c0 e0       	ldi	r28, 0x00	; 0
     2a8:	d8 e0       	ldi	r29, 0x08	; 8
     2aa:	83 e0       	ldi	r24, 0x03	; 3
     2ac:	88 83       	st	Y, r24
	TCC0.CTRLB = (1<<CCCEN)|(1<<CCBEN)|WGMODE;  //OC0C and OC0B enabled, and dual slope PWM with OVF on TOP
     2ae:	85 e6       	ldi	r24, 0x65	; 101
     2b0:	89 83       	std	Y+1, r24	; 0x01
	tc_enable(&TCC0);
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	98 e0       	ldi	r25, 0x08	; 8
     2b6:	0e 94 19 0b 	call	0x1632	; 0x1632 <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	88 7f       	andi	r24, 0xF8	; 248
     2be:	83 60       	ori	r24, 0x03	; 3
     2c0:	89 83       	std	Y+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
     2c2:	8f e2       	ldi	r24, 0x2F	; 47
     2c4:	95 e7       	ldi	r25, 0x75	; 117
     2c6:	8e a3       	std	Y+38, r24	; 0x26
     2c8:	9f a3       	std	Y+39, r25	; 0x27
	tc_set_wgm(&TCC0, TC_WG_SS);
	tc_write_period(&TCC0, PWM_PERIOD);				//PWM fequency: 3e6/2*(3e4) = 50 Hz
	tc_write_cc(&TCC0, TC_CCC, PWM_TH);			// duty cycle: PWM_TH/PWM_PERIOD
     2ca:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <__data_end>
     2ce:	90 91 23 20 	lds	r25, 0x2023	; 0x802023 <__data_end+0x1>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCB = value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCC = value;
     2d2:	8c a7       	std	Y+44, r24	; 0x2c
     2d4:	9d a7       	std	Y+45, r25	; 0x2d
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
		((TC0_t *)tc)->CTRLB |= enablemask;
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	80 64       	ori	r24, 0x40	; 64
     2da:	89 83       	std	Y+1, r24	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     2dc:	88 81       	ld	r24, Y
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     2de:	80 7f       	andi	r24, 0xF0	; 240
     2e0:	83 60       	ori	r24, 0x03	; 3
     2e2:	88 83       	st	Y, r24
	tc_enable_cc_channels(&TCC0,TC_CCCEN);
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV4_gc);
	OC0PORT.DIRSET = OC0PINbm;					//OC0PORT set as output
     2e4:	84 e0       	ldi	r24, 0x04	; 4
     2e6:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7de641>
}
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <setup>:


void setup(void);
void setup(void)
{
	setup_48MHz_12MHz_clock();
     2f0:	b5 df       	rcall	.-150    	; 0x25c <setup_48MHz_12MHz_clock>
	TCC0_Setup();
     2f2:	d7 df       	rcall	.-82     	; 0x2a2 <TCC0_Setup>
     2f4:	e0 e8       	ldi	r30, 0x80	; 128
	LED1PORT.DIRSET = LED1bm;	//set output
     2f6:	f6 e0       	ldi	r31, 0x06	; 6
     2f8:	92 e0       	ldi	r25, 0x02	; 2
     2fa:	91 83       	std	Z+1, r25	; 0x01
     2fc:	81 e0       	ldi	r24, 0x01	; 1
	LED2PORT.DIRSET = LED2bm;
     2fe:	81 83       	std	Z+1, r24	; 0x01
     300:	96 83       	std	Z+6, r25	; 0x06
	LED1_OFF;
     302:	86 83       	std	Z+6, r24	; 0x06
	LED2_OFF;	
     304:	0e 94 8a 0b 	call	0x1714	; 0x1714 <usartf0_init>
	usartf0_init();
     308:	e0 ea       	ldi	r30, 0xA0	; 160
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	82 81       	ldd	r24, Z+2	; 0x02
     30e:	81 60       	ori	r24, 0x01	; 1
     310:	82 83       	std	Z+2, r24	; 0x02
     312:	78 94       	sei
	pmic_enable_level(PMIC_LVL_LOW);									//Proc Multylevel Interrupt Controller (PMIC) enable IT level LOW
	sei();																// global IT enable
     314:	08 95       	ret

00000316 <main>:
     316:	cf 93       	push	r28
}


int main (void)
{
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	a4 97       	sbiw	r28, 0x24	; 36
     320:	cd bf       	out	0x3d, r28	; 61
     322:	de bf       	out	0x3e, r29	; 62
	char str[32];
	char tmpstr[2];
	tmpstr[1] = 0;
     324:	1a a2       	std	Y+34, r1	; 0x22
	register16_t result;
	
	setup();
     326:	e4 df       	rcall	.-56     	; 0x2f0 <setup>
	adc_setup();
     328:	8a df       	rcall	.-236    	; 0x23e <adc_setup>
     32a:	80 e0       	ldi	r24, 0x00	; 0
	adc_enable(&ADCA);
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	93 d0       	rcall	.+294    	; 0x456 <adc_enable>
     330:	e0 e0       	ldi	r30, 0x00	; 0
	
	while(1)
	{
		ADCA.CTRLA |= (ADC_CH0 << ADC_CH0START_bp);
     332:	f2 e0       	ldi	r31, 0x02	; 2
     334:	80 81       	ld	r24, Z
     336:	84 60       	ori	r24, 0x04	; 4
     338:	80 83       	st	Z, r24
     33a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7de206>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
     33e:	80 ff       	sbrs	r24, 0
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
     340:	fc cf       	rjmp	.-8      	; 0x33a <main+0x24>
     342:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     344:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__TEXT_REGION_LENGTH__+0x7de206>
     348:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7de224>

		adc_wait_for_interrupt_flag(&ADCA, ADC_CH0);
		/* Insert system clock initialization code here (sysclk_init()). */
		result = adc_get_result(&ADCA, ADC_CH0);
     34c:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7de225>
     350:	8b a3       	std	Y+35, r24	; 0x23
     352:	9c a3       	std	Y+36, r25	; 0x24
     354:	ce 01       	movw	r24, r28
		LED1_OFF;
		LED2_OFF;
		*/
		
		
		if(get_char(&tmpstr[0]))
     356:	81 96       	adiw	r24, 0x21	; 33
     358:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <get_char>
     35c:	88 23       	and	r24, r24
     35e:	f1 f0       	breq	.+60     	; 0x39c <main+0x86>
     360:	80 e1       	ldi	r24, 0x10	; 16
		{
			strcpy(str,"received char: ");
     362:	e2 e1       	ldi	r30, 0x12	; 18
     364:	f0 e2       	ldi	r31, 0x20	; 32
     366:	8e 01       	movw	r16, r28
     368:	0f 5f       	subi	r16, 0xFF	; 255
     36a:	1f 4f       	sbci	r17, 0xFF	; 255
     36c:	d8 01       	movw	r26, r16
     36e:	01 90       	ld	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	8a 95       	dec	r24
     374:	e1 f7       	brne	.-8      	; 0x36e <main+0x58>
     376:	be 01       	movw	r22, r28
			strcat(str,tmpstr);
     378:	6f 5d       	subi	r22, 0xDF	; 223
     37a:	7f 4f       	sbci	r23, 0xFF	; 255
     37c:	c8 01       	movw	r24, r16
     37e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strcat>
     382:	f8 01       	movw	r30, r16
			strcat(str,"\r\n");
     384:	01 90       	ld	r0, Z+
     386:	00 20       	and	r0, r0
     388:	e9 f7       	brne	.-6      	; 0x384 <main+0x6e>
     38a:	31 97       	sbiw	r30, 0x01	; 1
     38c:	8d e0       	ldi	r24, 0x0D	; 13
     38e:	9a e0       	ldi	r25, 0x0A	; 10
     390:	80 83       	st	Z, r24
     392:	91 83       	std	Z+1, r25	; 0x01
     394:	12 82       	std	Z+2, r1	; 0x02
     396:	c8 01       	movw	r24, r16
			usart_putstring(str);
     398:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <usart_putstring>
     39c:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <__data_end>
		}
		

		PWM_TH = (PWM_TH + 1)%PWM_PERIOD;
     3a0:	90 91 23 20 	lds	r25, 0x2023	; 0x802023 <__data_end+0x1>
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	6f e2       	ldi	r22, 0x2F	; 47
     3a8:	75 e7       	ldi	r23, 0x75	; 117
     3aa:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__udivmodhi4>
     3ae:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <__data_end>
     3b2:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <__data_end+0x1>
     3b6:	80 33       	cpi	r24, 0x30	; 48
		set_pwm(PWM_TH);
     3b8:	25 e7       	ldi	r18, 0x75	; 117
     3ba:	92 07       	cpc	r25, r18
     3bc:	38 f0       	brcs	.+14     	; 0x3cc <main+0xb6>
     3be:	8f e2       	ldi	r24, 0x2F	; 47
     3c0:	95 e7       	ldi	r25, 0x75	; 117
     3c2:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <__data_end>
     3c6:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <__data_end+0x1>
     3ca:	b2 cf       	rjmp	.-156    	; 0x330 <main+0x1a>
     3cc:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <__TEXT_REGION_LENGTH__+0x7de82c>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCB = value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCC = value;
     3d0:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <__TEXT_REGION_LENGTH__+0x7de82d>
     3d4:	ad cf       	rjmp	.-166    	; 0x330 <main+0x1a>

000003d6 <adc_enable_clock>:
     3d6:	81 15       	cp	r24, r1
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     3d8:	22 e0       	ldi	r18, 0x02	; 2
     3da:	92 07       	cpc	r25, r18
     3dc:	69 f4       	brne	.+26     	; 0x3f8 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     3de:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <adca_enable_count>
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	98 0f       	add	r25, r24
     3e6:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <adca_enable_count>
     3ea:	81 11       	cpse	r24, r1
     3ec:	14 c0       	rjmp	.+40     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     3ee:	62 e0       	ldi	r22, 0x02	; 2
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <sysclk_enable_module>
     3f6:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     3f8:	80 34       	cpi	r24, 0x40	; 64
     3fa:	92 40       	sbci	r25, 0x02	; 2
     3fc:	61 f4       	brne	.+24     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     3fe:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <adcb_enable_count>
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	98 0f       	add	r25, r24
     406:	90 93 24 20 	sts	0x2024, r25	; 0x802024 <adcb_enable_count>
     40a:	81 11       	cpse	r24, r1
     40c:	04 c0       	rjmp	.+8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     40e:	62 e0       	ldi	r22, 0x02	; 2
     410:	82 e0       	ldi	r24, 0x02	; 2
     412:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <sysclk_enable_module>
     416:	08 95       	ret

00000418 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     418:	81 15       	cp	r24, r1
     41a:	22 e0       	ldi	r18, 0x02	; 2
     41c:	92 07       	cpc	r25, r18
     41e:	61 f4       	brne	.+24     	; 0x438 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     420:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <adca_enable_count>
     424:	81 50       	subi	r24, 0x01	; 1
     426:	80 93 25 20 	sts	0x2025, r24	; 0x802025 <adca_enable_count>
     42a:	81 11       	cpse	r24, r1
     42c:	13 c0       	rjmp	.+38     	; 0x454 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     42e:	62 e0       	ldi	r22, 0x02	; 2
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <sysclk_disable_module>
     436:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     438:	80 34       	cpi	r24, 0x40	; 64
     43a:	92 40       	sbci	r25, 0x02	; 2
     43c:	59 f4       	brne	.+22     	; 0x454 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     43e:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <adcb_enable_count>
     442:	81 50       	subi	r24, 0x01	; 1
     444:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <adcb_enable_count>
     448:	81 11       	cpse	r24, r1
     44a:	04 c0       	rjmp	.+8      	; 0x454 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     44c:	62 e0       	ldi	r22, 0x02	; 2
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <sysclk_disable_module>
     454:	08 95       	ret

00000456 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	1f 92       	push	r1
     462:	1f 92       	push	r1
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     46a:	8f b7       	in	r24, 0x3f	; 63
     46c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     46e:	f8 94       	cli
	return flags;
     470:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     472:	c7 01       	movw	r24, r14
     474:	b0 df       	rcall	.-160    	; 0x3d6 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     476:	f7 01       	movw	r30, r14
     478:	80 81       	ld	r24, Z
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     47e:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     480:	80 91 7d 20 	lds	r24, 0x207D	; 0x80207d <sleepmgr_locks+0x1>
     484:	8f 3f       	cpi	r24, 0xFF	; 255
     486:	09 f4       	brne	.+2      	; 0x48a <adc_enable+0x34>
     488:	ff cf       	rjmp	.-2      	; 0x488 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     48a:	8f b7       	in	r24, 0x3f	; 63
     48c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     48e:	f8 94       	cli
	return flags;
     490:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     492:	ec e7       	ldi	r30, 0x7C	; 124
     494:	f0 e2       	ldi	r31, 0x20	; 32
     496:	81 81       	ldd	r24, Z+1	; 0x01
     498:	8f 5f       	subi	r24, 0xFF	; 255
     49a:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     49c:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	08 95       	ret

000004ae <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	1f 92       	push	r1
     4b6:	1f 92       	push	r1
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4bc:	2f b7       	in	r18, 0x3f	; 63
     4be:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     4c0:	f8 94       	cli
	return flags;
     4c2:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 81       	ld	r18, Z
     4c8:	2e 7f       	andi	r18, 0xFE	; 254
     4ca:	20 83       	st	Z, r18
	adc_disable_clock(adc);
     4cc:	a5 df       	rcall	.-182    	; 0x418 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4ce:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     4d0:	80 91 7d 20 	lds	r24, 0x207D	; 0x80207d <sleepmgr_locks+0x1>
     4d4:	81 11       	cpse	r24, r1
     4d6:	01 c0       	rjmp	.+2      	; 0x4da <adc_disable+0x2c>
     4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <adc_disable+0x2a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4da:	8f b7       	in	r24, 0x3f	; 63
     4dc:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     4de:	f8 94       	cli
	return flags;
     4e0:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     4e2:	ec e7       	ldi	r30, 0x7C	; 124
     4e4:	f0 e2       	ldi	r31, 0x20	; 32
     4e6:	81 81       	ldd	r24, Z+1	; 0x01
     4e8:	81 50       	subi	r24, 0x01	; 1
     4ea:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4ec:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	08 95       	ret

000004fa <__vector_71>:
	conf->ctrlb = adc->CTRLB;

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
     4fa:	1f 92       	push	r1
     4fc:	0f 92       	push	r0
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	0f 92       	push	r0
     502:	11 24       	eor	r1, r1
     504:	0b b6       	in	r0, 0x3b	; 59
     506:	0f 92       	push	r0
     508:	2f 93       	push	r18
     50a:	3f 93       	push	r19
     50c:	4f 93       	push	r20
     50e:	5f 93       	push	r21
     510:	6f 93       	push	r22
     512:	7f 93       	push	r23
     514:	8f 93       	push	r24
     516:	9f 93       	push	r25
     518:	af 93       	push	r26
     51a:	bf 93       	push	r27
     51c:	ef 93       	push	r30
     51e:	ff 93       	push	r31
     520:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7de224>
     524:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7de225>
     528:	e0 91 84 20 	lds	r30, 0x2084	; 0x802084 <adca_callback>
     52c:	f0 91 85 20 	lds	r31, 0x2085	; 0x802085 <adca_callback+0x1>
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	19 95       	eicall
     538:	ff 91       	pop	r31
     53a:	ef 91       	pop	r30
     53c:	bf 91       	pop	r27
     53e:	af 91       	pop	r26
     540:	9f 91       	pop	r25
     542:	8f 91       	pop	r24
     544:	7f 91       	pop	r23
     546:	6f 91       	pop	r22
     548:	5f 91       	pop	r21
     54a:	4f 91       	pop	r20
     54c:	3f 91       	pop	r19
     54e:	2f 91       	pop	r18
     550:	0f 90       	pop	r0
     552:	0b be       	out	0x3b, r0	; 59
     554:	0f 90       	pop	r0
     556:	0f be       	out	0x3f, r0	; 63
     558:	0f 90       	pop	r0
     55a:	1f 90       	pop	r1
     55c:	18 95       	reti

0000055e <__vector_72>:
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	11 24       	eor	r1, r1
     568:	0b b6       	in	r0, 0x3b	; 59
     56a:	0f 92       	push	r0
     56c:	2f 93       	push	r18
     56e:	3f 93       	push	r19
     570:	4f 93       	push	r20
     572:	5f 93       	push	r21
     574:	6f 93       	push	r22
     576:	7f 93       	push	r23
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	af 93       	push	r26
     57e:	bf 93       	push	r27
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31
     584:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x7de22c>
     588:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x7de22d>
     58c:	e0 91 84 20 	lds	r30, 0x2084	; 0x802084 <adca_callback>
     590:	f0 91 85 20 	lds	r31, 0x2085	; 0x802085 <adca_callback+0x1>
     594:	62 e0       	ldi	r22, 0x02	; 2
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	19 95       	eicall
     59c:	ff 91       	pop	r31
     59e:	ef 91       	pop	r30
     5a0:	bf 91       	pop	r27
     5a2:	af 91       	pop	r26
     5a4:	9f 91       	pop	r25
     5a6:	8f 91       	pop	r24
     5a8:	7f 91       	pop	r23
     5aa:	6f 91       	pop	r22
     5ac:	5f 91       	pop	r21
     5ae:	4f 91       	pop	r20
     5b0:	3f 91       	pop	r19
     5b2:	2f 91       	pop	r18
     5b4:	0f 90       	pop	r0
     5b6:	0b be       	out	0x3b, r0	; 59
     5b8:	0f 90       	pop	r0
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	0f 90       	pop	r0
     5be:	1f 90       	pop	r1
     5c0:	18 95       	reti

000005c2 <__vector_73>:
     5c2:	1f 92       	push	r1
     5c4:	0f 92       	push	r0
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	0f 92       	push	r0
     5ca:	11 24       	eor	r1, r1
     5cc:	0b b6       	in	r0, 0x3b	; 59
     5ce:	0f 92       	push	r0
     5d0:	2f 93       	push	r18
     5d2:	3f 93       	push	r19
     5d4:	4f 93       	push	r20
     5d6:	5f 93       	push	r21
     5d8:	6f 93       	push	r22
     5da:	7f 93       	push	r23
     5dc:	8f 93       	push	r24
     5de:	9f 93       	push	r25
     5e0:	af 93       	push	r26
     5e2:	bf 93       	push	r27
     5e4:	ef 93       	push	r30
     5e6:	ff 93       	push	r31
     5e8:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x7de234>
     5ec:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x7de235>
     5f0:	e0 91 84 20 	lds	r30, 0x2084	; 0x802084 <adca_callback>
     5f4:	f0 91 85 20 	lds	r31, 0x2085	; 0x802085 <adca_callback+0x1>
     5f8:	64 e0       	ldi	r22, 0x04	; 4
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	19 95       	eicall
     600:	ff 91       	pop	r31
     602:	ef 91       	pop	r30
     604:	bf 91       	pop	r27
     606:	af 91       	pop	r26
     608:	9f 91       	pop	r25
     60a:	8f 91       	pop	r24
     60c:	7f 91       	pop	r23
     60e:	6f 91       	pop	r22
     610:	5f 91       	pop	r21
     612:	4f 91       	pop	r20
     614:	3f 91       	pop	r19
     616:	2f 91       	pop	r18
     618:	0f 90       	pop	r0
     61a:	0b be       	out	0x3b, r0	; 59
     61c:	0f 90       	pop	r0
     61e:	0f be       	out	0x3f, r0	; 63
     620:	0f 90       	pop	r0
     622:	1f 90       	pop	r1
     624:	18 95       	reti

00000626 <__vector_74>:
     626:	1f 92       	push	r1
     628:	0f 92       	push	r0
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	0f 92       	push	r0
     62e:	11 24       	eor	r1, r1
     630:	0b b6       	in	r0, 0x3b	; 59
     632:	0f 92       	push	r0
     634:	2f 93       	push	r18
     636:	3f 93       	push	r19
     638:	4f 93       	push	r20
     63a:	5f 93       	push	r21
     63c:	6f 93       	push	r22
     63e:	7f 93       	push	r23
     640:	8f 93       	push	r24
     642:	9f 93       	push	r25
     644:	af 93       	push	r26
     646:	bf 93       	push	r27
     648:	ef 93       	push	r30
     64a:	ff 93       	push	r31
     64c:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x7de23c>
     650:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x7de23d>
     654:	e0 91 84 20 	lds	r30, 0x2084	; 0x802084 <adca_callback>
     658:	f0 91 85 20 	lds	r31, 0x2085	; 0x802085 <adca_callback+0x1>
     65c:	68 e0       	ldi	r22, 0x08	; 8
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	19 95       	eicall
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	0f 90       	pop	r0
     67e:	0b be       	out	0x3b, r0	; 59
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <__vector_39>:
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
     694:	0b b6       	in	r0, 0x3b	; 59
     696:	0f 92       	push	r0
     698:	2f 93       	push	r18
     69a:	3f 93       	push	r19
     69c:	4f 93       	push	r20
     69e:	5f 93       	push	r21
     6a0:	6f 93       	push	r22
     6a2:	7f 93       	push	r23
     6a4:	8f 93       	push	r24
     6a6:	9f 93       	push	r25
     6a8:	af 93       	push	r26
     6aa:	bf 93       	push	r27
     6ac:	ef 93       	push	r30
     6ae:	ff 93       	push	r31
     6b0:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x7de264>
     6b4:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x7de265>
     6b8:	e0 91 82 20 	lds	r30, 0x2082	; 0x802082 <adcb_callback>
     6bc:	f0 91 83 20 	lds	r31, 0x2083	; 0x802083 <adcb_callback+0x1>
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	80 e4       	ldi	r24, 0x40	; 64
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	19 95       	eicall
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	7f 91       	pop	r23
     6d6:	6f 91       	pop	r22
     6d8:	5f 91       	pop	r21
     6da:	4f 91       	pop	r20
     6dc:	3f 91       	pop	r19
     6de:	2f 91       	pop	r18
     6e0:	0f 90       	pop	r0
     6e2:	0b be       	out	0x3b, r0	; 59
     6e4:	0f 90       	pop	r0
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	0f 90       	pop	r0
     6ea:	1f 90       	pop	r1
     6ec:	18 95       	reti

000006ee <__vector_40>:
     6ee:	1f 92       	push	r1
     6f0:	0f 92       	push	r0
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	0f 92       	push	r0
     6f6:	11 24       	eor	r1, r1
     6f8:	0b b6       	in	r0, 0x3b	; 59
     6fa:	0f 92       	push	r0
     6fc:	2f 93       	push	r18
     6fe:	3f 93       	push	r19
     700:	4f 93       	push	r20
     702:	5f 93       	push	r21
     704:	6f 93       	push	r22
     706:	7f 93       	push	r23
     708:	8f 93       	push	r24
     70a:	9f 93       	push	r25
     70c:	af 93       	push	r26
     70e:	bf 93       	push	r27
     710:	ef 93       	push	r30
     712:	ff 93       	push	r31
     714:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x7de26c>
     718:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x7de26d>
     71c:	e0 91 82 20 	lds	r30, 0x2082	; 0x802082 <adcb_callback>
     720:	f0 91 83 20 	lds	r31, 0x2083	; 0x802083 <adcb_callback+0x1>
     724:	62 e0       	ldi	r22, 0x02	; 2
     726:	80 e4       	ldi	r24, 0x40	; 64
     728:	92 e0       	ldi	r25, 0x02	; 2
     72a:	19 95       	eicall
     72c:	ff 91       	pop	r31
     72e:	ef 91       	pop	r30
     730:	bf 91       	pop	r27
     732:	af 91       	pop	r26
     734:	9f 91       	pop	r25
     736:	8f 91       	pop	r24
     738:	7f 91       	pop	r23
     73a:	6f 91       	pop	r22
     73c:	5f 91       	pop	r21
     73e:	4f 91       	pop	r20
     740:	3f 91       	pop	r19
     742:	2f 91       	pop	r18
     744:	0f 90       	pop	r0
     746:	0b be       	out	0x3b, r0	; 59
     748:	0f 90       	pop	r0
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	0f 90       	pop	r0
     74e:	1f 90       	pop	r1
     750:	18 95       	reti

00000752 <__vector_41>:
     752:	1f 92       	push	r1
     754:	0f 92       	push	r0
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	0f 92       	push	r0
     75a:	11 24       	eor	r1, r1
     75c:	0b b6       	in	r0, 0x3b	; 59
     75e:	0f 92       	push	r0
     760:	2f 93       	push	r18
     762:	3f 93       	push	r19
     764:	4f 93       	push	r20
     766:	5f 93       	push	r21
     768:	6f 93       	push	r22
     76a:	7f 93       	push	r23
     76c:	8f 93       	push	r24
     76e:	9f 93       	push	r25
     770:	af 93       	push	r26
     772:	bf 93       	push	r27
     774:	ef 93       	push	r30
     776:	ff 93       	push	r31
     778:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x7de274>
     77c:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x7de275>
     780:	e0 91 82 20 	lds	r30, 0x2082	; 0x802082 <adcb_callback>
     784:	f0 91 83 20 	lds	r31, 0x2083	; 0x802083 <adcb_callback+0x1>
     788:	64 e0       	ldi	r22, 0x04	; 4
     78a:	80 e4       	ldi	r24, 0x40	; 64
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	19 95       	eicall
     790:	ff 91       	pop	r31
     792:	ef 91       	pop	r30
     794:	bf 91       	pop	r27
     796:	af 91       	pop	r26
     798:	9f 91       	pop	r25
     79a:	8f 91       	pop	r24
     79c:	7f 91       	pop	r23
     79e:	6f 91       	pop	r22
     7a0:	5f 91       	pop	r21
     7a2:	4f 91       	pop	r20
     7a4:	3f 91       	pop	r19
     7a6:	2f 91       	pop	r18
     7a8:	0f 90       	pop	r0
     7aa:	0b be       	out	0x3b, r0	; 59
     7ac:	0f 90       	pop	r0
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	0f 90       	pop	r0
     7b2:	1f 90       	pop	r1
     7b4:	18 95       	reti

000007b6 <__vector_42>:
     7b6:	1f 92       	push	r1
     7b8:	0f 92       	push	r0
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	0b b6       	in	r0, 0x3b	; 59
     7c2:	0f 92       	push	r0
     7c4:	2f 93       	push	r18
     7c6:	3f 93       	push	r19
     7c8:	4f 93       	push	r20
     7ca:	5f 93       	push	r21
     7cc:	6f 93       	push	r22
     7ce:	7f 93       	push	r23
     7d0:	8f 93       	push	r24
     7d2:	9f 93       	push	r25
     7d4:	af 93       	push	r26
     7d6:	bf 93       	push	r27
     7d8:	ef 93       	push	r30
     7da:	ff 93       	push	r31
     7dc:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x7de27c>
     7e0:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x7de27d>
     7e4:	e0 91 82 20 	lds	r30, 0x2082	; 0x802082 <adcb_callback>
     7e8:	f0 91 83 20 	lds	r31, 0x2083	; 0x802083 <adcb_callback+0x1>
     7ec:	68 e0       	ldi	r22, 0x08	; 8
     7ee:	80 e4       	ldi	r24, 0x40	; 64
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	19 95       	eicall
     7f4:	ff 91       	pop	r31
     7f6:	ef 91       	pop	r30
     7f8:	bf 91       	pop	r27
     7fa:	af 91       	pop	r26
     7fc:	9f 91       	pop	r25
     7fe:	8f 91       	pop	r24
     800:	7f 91       	pop	r23
     802:	6f 91       	pop	r22
     804:	5f 91       	pop	r21
     806:	4f 91       	pop	r20
     808:	3f 91       	pop	r19
     80a:	2f 91       	pop	r18
     80c:	0f 90       	pop	r0
     80e:	0b be       	out	0x3b, r0	; 59
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <adc_write_configuration>:
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	1f 92       	push	r1
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	8c 01       	movw	r16, r24
     834:	7b 01       	movw	r14, r22
     836:	81 15       	cp	r24, r1
     838:	22 e0       	ldi	r18, 0x02	; 2
     83a:	92 07       	cpc	r25, r18
     83c:	81 f4       	brne	.+32     	; 0x85e <adc_write_configuration+0x44>
     83e:	61 e2       	ldi	r22, 0x21	; 33
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <nvm_read_byte>
     848:	c8 2e       	mov	r12, r24
     84a:	d1 2c       	mov	r13, r1
     84c:	dc 2c       	mov	r13, r12
     84e:	cc 24       	eor	r12, r12
     850:	60 e2       	ldi	r22, 0x20	; 32
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <nvm_read_byte>
     85a:	c8 2a       	or	r12, r24
     85c:	12 c0       	rjmp	.+36     	; 0x882 <adc_write_configuration+0x68>
     85e:	80 34       	cpi	r24, 0x40	; 64
     860:	92 40       	sbci	r25, 0x02	; 2
     862:	d1 f5       	brne	.+116    	; 0x8d8 <adc_write_configuration+0xbe>
     864:	65 e2       	ldi	r22, 0x25	; 37
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <nvm_read_byte>
     86e:	c8 2e       	mov	r12, r24
     870:	d1 2c       	mov	r13, r1
     872:	dc 2c       	mov	r13, r12
     874:	cc 24       	eor	r12, r12
     876:	64 e2       	ldi	r22, 0x24	; 36
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <nvm_read_byte>
     880:	c8 2a       	or	r12, r24
     882:	8f b7       	in	r24, 0x3f	; 63
     884:	89 83       	std	Y+1, r24	; 0x01
     886:	f8 94       	cli
     888:	b9 80       	ldd	r11, Y+1	; 0x01
     88a:	c8 01       	movw	r24, r16
     88c:	a4 dd       	rcall	.-1208   	; 0x3d6 <adc_enable_clock>
     88e:	f8 01       	movw	r30, r16
     890:	80 81       	ld	r24, Z
     892:	81 70       	andi	r24, 0x01	; 1
     894:	92 e0       	ldi	r25, 0x02	; 2
     896:	90 83       	st	Z, r25
     898:	c4 86       	std	Z+12, r12	; 0x0c
     89a:	d5 86       	std	Z+13, r13	; 0x0d
     89c:	f7 01       	movw	r30, r14
     89e:	25 81       	ldd	r18, Z+5	; 0x05
     8a0:	36 81       	ldd	r19, Z+6	; 0x06
     8a2:	f8 01       	movw	r30, r16
     8a4:	20 8f       	std	Z+24, r18	; 0x18
     8a6:	31 8f       	std	Z+25, r19	; 0x19
     8a8:	f7 01       	movw	r30, r14
     8aa:	92 81       	ldd	r25, Z+2	; 0x02
     8ac:	f8 01       	movw	r30, r16
     8ae:	92 83       	std	Z+2, r25	; 0x02
     8b0:	f7 01       	movw	r30, r14
     8b2:	94 81       	ldd	r25, Z+4	; 0x04
     8b4:	f8 01       	movw	r30, r16
     8b6:	94 83       	std	Z+4, r25	; 0x04
     8b8:	f7 01       	movw	r30, r14
     8ba:	93 81       	ldd	r25, Z+3	; 0x03
     8bc:	f8 01       	movw	r30, r16
     8be:	93 83       	std	Z+3, r25	; 0x03
     8c0:	f7 01       	movw	r30, r14
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	f8 01       	movw	r30, r16
     8c6:	91 83       	std	Z+1, r25	; 0x01
     8c8:	f7 01       	movw	r30, r14
     8ca:	90 81       	ld	r25, Z
     8cc:	89 2b       	or	r24, r25
     8ce:	f8 01       	movw	r30, r16
     8d0:	80 83       	st	Z, r24
     8d2:	c8 01       	movw	r24, r16
     8d4:	a1 dd       	rcall	.-1214   	; 0x418 <adc_disable_clock>
     8d6:	bf be       	out	0x3f, r11	; 63
     8d8:	0f 90       	pop	r0
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	bf 90       	pop	r11
     8ec:	08 95       	ret

000008ee <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     8ee:	af 92       	push	r10
     8f0:	bf 92       	push	r11
     8f2:	cf 92       	push	r12
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	1f 92       	push	r1
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	6c 01       	movw	r12, r24
     90a:	b6 2e       	mov	r11, r22
     90c:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     90e:	86 2f       	mov	r24, r22
     910:	83 70       	andi	r24, 0x03	; 3
     912:	29 f4       	brne	.+10     	; 0x91e <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     914:	86 2f       	mov	r24, r22
     916:	86 95       	lsr	r24
     918:	86 95       	lsr	r24
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     91a:	02 e0       	ldi	r16, 0x02	; 2
     91c:	02 c0       	rjmp	.+4      	; 0x922 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     91e:	86 2f       	mov	r24, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     920:	00 e0       	ldi	r16, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     922:	80 ff       	sbrs	r24, 0
		index++;
     924:	0f 5f       	subi	r16, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     926:	10 e0       	ldi	r17, 0x00	; 0
     928:	00 0f       	add	r16, r16
     92a:	11 1f       	adc	r17, r17
     92c:	00 0f       	add	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	00 0f       	add	r16, r16
     932:	11 1f       	adc	r17, r17
     934:	c6 01       	movw	r24, r12
     936:	80 96       	adiw	r24, 0x20	; 32
     938:	08 0f       	add	r16, r24
     93a:	19 1f       	adc	r17, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     93c:	8f b7       	in	r24, 0x3f	; 63
     93e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     940:	f8 94       	cli
	return flags;
     942:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     944:	c6 01       	movw	r24, r12
     946:	47 dd       	rcall	.-1394   	; 0x3d6 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     948:	f7 01       	movw	r30, r14
     94a:	80 81       	ld	r24, Z
     94c:	f8 01       	movw	r30, r16
     94e:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     950:	f7 01       	movw	r30, r14
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	f8 01       	movw	r30, r16
     956:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     958:	f7 01       	movw	r30, r14
     95a:	81 81       	ldd	r24, Z+1	; 0x01
     95c:	f8 01       	movw	r30, r16
     95e:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     960:	b0 fe       	sbrs	r11, 0
     962:	04 c0       	rjmp	.+8      	; 0x96c <adcch_write_configuration+0x7e>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     964:	f7 01       	movw	r30, r14
     966:	83 81       	ldd	r24, Z+3	; 0x03
     968:	f8 01       	movw	r30, r16
     96a:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
     96c:	c6 01       	movw	r24, r12
     96e:	54 dd       	rcall	.-1368   	; 0x418 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     970:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
     972:	0f 90       	pop	r0
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	df 90       	pop	r13
     982:	cf 90       	pop	r12
     984:	bf 90       	pop	r11
     986:	af 90       	pop	r10
     988:	08 95       	ret

0000098a <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	0f 92       	push	r0
     992:	11 24       	eor	r1, r1
     994:	0b b6       	in	r0, 0x3b	; 59
     996:	0f 92       	push	r0
     998:	2f 93       	push	r18
     99a:	3f 93       	push	r19
     99c:	4f 93       	push	r20
     99e:	5f 93       	push	r21
     9a0:	6f 93       	push	r22
     9a2:	7f 93       	push	r23
     9a4:	8f 93       	push	r24
     9a6:	9f 93       	push	r25
     9a8:	af 93       	push	r26
     9aa:	bf 93       	push	r27
     9ac:	ef 93       	push	r30
     9ae:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     9b0:	e0 91 6c 20 	lds	r30, 0x206C	; 0x80206c <tc_tcc0_ovf_callback>
     9b4:	f0 91 6d 20 	lds	r31, 0x206D	; 0x80206d <tc_tcc0_ovf_callback+0x1>
     9b8:	30 97       	sbiw	r30, 0x00	; 0
     9ba:	09 f0       	breq	.+2      	; 0x9be <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     9bc:	19 95       	eicall
	}
}
     9be:	ff 91       	pop	r31
     9c0:	ef 91       	pop	r30
     9c2:	bf 91       	pop	r27
     9c4:	af 91       	pop	r26
     9c6:	9f 91       	pop	r25
     9c8:	8f 91       	pop	r24
     9ca:	7f 91       	pop	r23
     9cc:	6f 91       	pop	r22
     9ce:	5f 91       	pop	r21
     9d0:	4f 91       	pop	r20
     9d2:	3f 91       	pop	r19
     9d4:	2f 91       	pop	r18
     9d6:	0f 90       	pop	r0
     9d8:	0b be       	out	0x3b, r0	; 59
     9da:	0f 90       	pop	r0
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	0f 90       	pop	r0
     9e0:	1f 90       	pop	r1
     9e2:	18 95       	reti

000009e4 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     9e4:	1f 92       	push	r1
     9e6:	0f 92       	push	r0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	0b b6       	in	r0, 0x3b	; 59
     9f0:	0f 92       	push	r0
     9f2:	2f 93       	push	r18
     9f4:	3f 93       	push	r19
     9f6:	4f 93       	push	r20
     9f8:	5f 93       	push	r21
     9fa:	6f 93       	push	r22
     9fc:	7f 93       	push	r23
     9fe:	8f 93       	push	r24
     a00:	9f 93       	push	r25
     a02:	af 93       	push	r26
     a04:	bf 93       	push	r27
     a06:	ef 93       	push	r30
     a08:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     a0a:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <tc_tcc0_err_callback>
     a0e:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <tc_tcc0_err_callback+0x1>
     a12:	30 97       	sbiw	r30, 0x00	; 0
     a14:	09 f0       	breq	.+2      	; 0xa18 <__vector_15+0x34>
		tc_tcc0_err_callback();
     a16:	19 95       	eicall
	}
}
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0b be       	out	0x3b, r0	; 59
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     a3e:	1f 92       	push	r1
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	0f 92       	push	r0
     a46:	11 24       	eor	r1, r1
     a48:	0b b6       	in	r0, 0x3b	; 59
     a4a:	0f 92       	push	r0
     a4c:	2f 93       	push	r18
     a4e:	3f 93       	push	r19
     a50:	4f 93       	push	r20
     a52:	5f 93       	push	r21
     a54:	6f 93       	push	r22
     a56:	7f 93       	push	r23
     a58:	8f 93       	push	r24
     a5a:	9f 93       	push	r25
     a5c:	af 93       	push	r26
     a5e:	bf 93       	push	r27
     a60:	ef 93       	push	r30
     a62:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     a64:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <tc_tcc0_cca_callback>
     a68:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <tc_tcc0_cca_callback+0x1>
     a6c:	30 97       	sbiw	r30, 0x00	; 0
     a6e:	09 f0       	breq	.+2      	; 0xa72 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     a70:	19 95       	eicall
	}
}
     a72:	ff 91       	pop	r31
     a74:	ef 91       	pop	r30
     a76:	bf 91       	pop	r27
     a78:	af 91       	pop	r26
     a7a:	9f 91       	pop	r25
     a7c:	8f 91       	pop	r24
     a7e:	7f 91       	pop	r23
     a80:	6f 91       	pop	r22
     a82:	5f 91       	pop	r21
     a84:	4f 91       	pop	r20
     a86:	3f 91       	pop	r19
     a88:	2f 91       	pop	r18
     a8a:	0f 90       	pop	r0
     a8c:	0b be       	out	0x3b, r0	; 59
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	0f 90       	pop	r0
     a94:	1f 90       	pop	r1
     a96:	18 95       	reti

00000a98 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	0b b6       	in	r0, 0x3b	; 59
     aa4:	0f 92       	push	r0
     aa6:	2f 93       	push	r18
     aa8:	3f 93       	push	r19
     aaa:	4f 93       	push	r20
     aac:	5f 93       	push	r21
     aae:	6f 93       	push	r22
     ab0:	7f 93       	push	r23
     ab2:	8f 93       	push	r24
     ab4:	9f 93       	push	r25
     ab6:	af 93       	push	r26
     ab8:	bf 93       	push	r27
     aba:	ef 93       	push	r30
     abc:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     abe:	e0 91 66 20 	lds	r30, 0x2066	; 0x802066 <tc_tcc0_ccb_callback>
     ac2:	f0 91 67 20 	lds	r31, 0x2067	; 0x802067 <tc_tcc0_ccb_callback+0x1>
     ac6:	30 97       	sbiw	r30, 0x00	; 0
     ac8:	09 f0       	breq	.+2      	; 0xacc <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     aca:	19 95       	eicall
	}
}
     acc:	ff 91       	pop	r31
     ace:	ef 91       	pop	r30
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	0f 90       	pop	r0
     ae6:	0b be       	out	0x3b, r0	; 59
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	0b b6       	in	r0, 0x3b	; 59
     afe:	0f 92       	push	r0
     b00:	2f 93       	push	r18
     b02:	3f 93       	push	r19
     b04:	4f 93       	push	r20
     b06:	5f 93       	push	r21
     b08:	6f 93       	push	r22
     b0a:	7f 93       	push	r23
     b0c:	8f 93       	push	r24
     b0e:	9f 93       	push	r25
     b10:	af 93       	push	r26
     b12:	bf 93       	push	r27
     b14:	ef 93       	push	r30
     b16:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     b18:	e0 91 64 20 	lds	r30, 0x2064	; 0x802064 <tc_tcc0_ccc_callback>
     b1c:	f0 91 65 20 	lds	r31, 0x2065	; 0x802065 <tc_tcc0_ccc_callback+0x1>
     b20:	30 97       	sbiw	r30, 0x00	; 0
     b22:	09 f0       	breq	.+2      	; 0xb26 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     b24:	19 95       	eicall
	}
}
     b26:	ff 91       	pop	r31
     b28:	ef 91       	pop	r30
     b2a:	bf 91       	pop	r27
     b2c:	af 91       	pop	r26
     b2e:	9f 91       	pop	r25
     b30:	8f 91       	pop	r24
     b32:	7f 91       	pop	r23
     b34:	6f 91       	pop	r22
     b36:	5f 91       	pop	r21
     b38:	4f 91       	pop	r20
     b3a:	3f 91       	pop	r19
     b3c:	2f 91       	pop	r18
     b3e:	0f 90       	pop	r0
     b40:	0b be       	out	0x3b, r0	; 59
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	0f 90       	pop	r0
     b48:	1f 90       	pop	r1
     b4a:	18 95       	reti

00000b4c <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	0b b6       	in	r0, 0x3b	; 59
     b58:	0f 92       	push	r0
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     b72:	e0 91 62 20 	lds	r30, 0x2062	; 0x802062 <tc_tcc0_ccd_callback>
     b76:	f0 91 63 20 	lds	r31, 0x2063	; 0x802063 <tc_tcc0_ccd_callback+0x1>
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	09 f0       	breq	.+2      	; 0xb80 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     b7e:	19 95       	eicall
	}
}
     b80:	ff 91       	pop	r31
     b82:	ef 91       	pop	r30
     b84:	bf 91       	pop	r27
     b86:	af 91       	pop	r26
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	7f 91       	pop	r23
     b8e:	6f 91       	pop	r22
     b90:	5f 91       	pop	r21
     b92:	4f 91       	pop	r20
     b94:	3f 91       	pop	r19
     b96:	2f 91       	pop	r18
     b98:	0f 90       	pop	r0
     b9a:	0b be       	out	0x3b, r0	; 59
     b9c:	0f 90       	pop	r0
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	0f 90       	pop	r0
     ba2:	1f 90       	pop	r1
     ba4:	18 95       	reti

00000ba6 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     ba6:	1f 92       	push	r1
     ba8:	0f 92       	push	r0
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	0f 92       	push	r0
     bae:	11 24       	eor	r1, r1
     bb0:	0b b6       	in	r0, 0x3b	; 59
     bb2:	0f 92       	push	r0
     bb4:	2f 93       	push	r18
     bb6:	3f 93       	push	r19
     bb8:	4f 93       	push	r20
     bba:	5f 93       	push	r21
     bbc:	6f 93       	push	r22
     bbe:	7f 93       	push	r23
     bc0:	8f 93       	push	r24
     bc2:	9f 93       	push	r25
     bc4:	af 93       	push	r26
     bc6:	bf 93       	push	r27
     bc8:	ef 93       	push	r30
     bca:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     bcc:	e0 91 60 20 	lds	r30, 0x2060	; 0x802060 <tc_tcc1_ovf_callback>
     bd0:	f0 91 61 20 	lds	r31, 0x2061	; 0x802061 <tc_tcc1_ovf_callback+0x1>
     bd4:	30 97       	sbiw	r30, 0x00	; 0
     bd6:	09 f0       	breq	.+2      	; 0xbda <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     bd8:	19 95       	eicall
	}
}
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	0f 90       	pop	r0
     bf4:	0b be       	out	0x3b, r0	; 59
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     c00:	1f 92       	push	r1
     c02:	0f 92       	push	r0
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	0f 92       	push	r0
     c08:	11 24       	eor	r1, r1
     c0a:	0b b6       	in	r0, 0x3b	; 59
     c0c:	0f 92       	push	r0
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	4f 93       	push	r20
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     c26:	e0 91 5e 20 	lds	r30, 0x205E	; 0x80205e <tc_tcc1_err_callback>
     c2a:	f0 91 5f 20 	lds	r31, 0x205F	; 0x80205f <tc_tcc1_err_callback+0x1>
     c2e:	30 97       	sbiw	r30, 0x00	; 0
     c30:	09 f0       	breq	.+2      	; 0xc34 <__vector_21+0x34>
		tc_tcc1_err_callback();
     c32:	19 95       	eicall
	}
}
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	bf 91       	pop	r27
     c3a:	af 91       	pop	r26
     c3c:	9f 91       	pop	r25
     c3e:	8f 91       	pop	r24
     c40:	7f 91       	pop	r23
     c42:	6f 91       	pop	r22
     c44:	5f 91       	pop	r21
     c46:	4f 91       	pop	r20
     c48:	3f 91       	pop	r19
     c4a:	2f 91       	pop	r18
     c4c:	0f 90       	pop	r0
     c4e:	0b be       	out	0x3b, r0	; 59
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     c5a:	1f 92       	push	r1
     c5c:	0f 92       	push	r0
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	0f 92       	push	r0
     c62:	11 24       	eor	r1, r1
     c64:	0b b6       	in	r0, 0x3b	; 59
     c66:	0f 92       	push	r0
     c68:	2f 93       	push	r18
     c6a:	3f 93       	push	r19
     c6c:	4f 93       	push	r20
     c6e:	5f 93       	push	r21
     c70:	6f 93       	push	r22
     c72:	7f 93       	push	r23
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	af 93       	push	r26
     c7a:	bf 93       	push	r27
     c7c:	ef 93       	push	r30
     c7e:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     c80:	e0 91 5c 20 	lds	r30, 0x205C	; 0x80205c <tc_tcc1_cca_callback>
     c84:	f0 91 5d 20 	lds	r31, 0x205D	; 0x80205d <tc_tcc1_cca_callback+0x1>
     c88:	30 97       	sbiw	r30, 0x00	; 0
     c8a:	09 f0       	breq	.+2      	; 0xc8e <__vector_22+0x34>
		tc_tcc1_cca_callback();
     c8c:	19 95       	eicall
	}
}
     c8e:	ff 91       	pop	r31
     c90:	ef 91       	pop	r30
     c92:	bf 91       	pop	r27
     c94:	af 91       	pop	r26
     c96:	9f 91       	pop	r25
     c98:	8f 91       	pop	r24
     c9a:	7f 91       	pop	r23
     c9c:	6f 91       	pop	r22
     c9e:	5f 91       	pop	r21
     ca0:	4f 91       	pop	r20
     ca2:	3f 91       	pop	r19
     ca4:	2f 91       	pop	r18
     ca6:	0f 90       	pop	r0
     ca8:	0b be       	out	0x3b, r0	; 59
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0
     cb0:	1f 90       	pop	r1
     cb2:	18 95       	reti

00000cb4 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	0b b6       	in	r0, 0x3b	; 59
     cc0:	0f 92       	push	r0
     cc2:	2f 93       	push	r18
     cc4:	3f 93       	push	r19
     cc6:	4f 93       	push	r20
     cc8:	5f 93       	push	r21
     cca:	6f 93       	push	r22
     ccc:	7f 93       	push	r23
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	af 93       	push	r26
     cd4:	bf 93       	push	r27
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     cda:	e0 91 5a 20 	lds	r30, 0x205A	; 0x80205a <tc_tcc1_ccb_callback>
     cde:	f0 91 5b 20 	lds	r31, 0x205B	; 0x80205b <tc_tcc1_ccb_callback+0x1>
     ce2:	30 97       	sbiw	r30, 0x00	; 0
     ce4:	09 f0       	breq	.+2      	; 0xce8 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     ce6:	19 95       	eicall
	}
}
     ce8:	ff 91       	pop	r31
     cea:	ef 91       	pop	r30
     cec:	bf 91       	pop	r27
     cee:	af 91       	pop	r26
     cf0:	9f 91       	pop	r25
     cf2:	8f 91       	pop	r24
     cf4:	7f 91       	pop	r23
     cf6:	6f 91       	pop	r22
     cf8:	5f 91       	pop	r21
     cfa:	4f 91       	pop	r20
     cfc:	3f 91       	pop	r19
     cfe:	2f 91       	pop	r18
     d00:	0f 90       	pop	r0
     d02:	0b be       	out	0x3b, r0	; 59
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	1f 90       	pop	r1
     d0c:	18 95       	reti

00000d0e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     d0e:	1f 92       	push	r1
     d10:	0f 92       	push	r0
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	0f 92       	push	r0
     d16:	11 24       	eor	r1, r1
     d18:	0b b6       	in	r0, 0x3b	; 59
     d1a:	0f 92       	push	r0
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     d34:	e0 91 58 20 	lds	r30, 0x2058	; 0x802058 <tc_tcd0_ovf_callback>
     d38:	f0 91 59 20 	lds	r31, 0x2059	; 0x802059 <tc_tcd0_ovf_callback+0x1>
     d3c:	30 97       	sbiw	r30, 0x00	; 0
     d3e:	09 f0       	breq	.+2      	; 0xd42 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     d40:	19 95       	eicall
	}
}
     d42:	ff 91       	pop	r31
     d44:	ef 91       	pop	r30
     d46:	bf 91       	pop	r27
     d48:	af 91       	pop	r26
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	7f 91       	pop	r23
     d50:	6f 91       	pop	r22
     d52:	5f 91       	pop	r21
     d54:	4f 91       	pop	r20
     d56:	3f 91       	pop	r19
     d58:	2f 91       	pop	r18
     d5a:	0f 90       	pop	r0
     d5c:	0b be       	out	0x3b, r0	; 59
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	0b b6       	in	r0, 0x3b	; 59
     d74:	0f 92       	push	r0
     d76:	2f 93       	push	r18
     d78:	3f 93       	push	r19
     d7a:	4f 93       	push	r20
     d7c:	5f 93       	push	r21
     d7e:	6f 93       	push	r22
     d80:	7f 93       	push	r23
     d82:	8f 93       	push	r24
     d84:	9f 93       	push	r25
     d86:	af 93       	push	r26
     d88:	bf 93       	push	r27
     d8a:	ef 93       	push	r30
     d8c:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     d8e:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <tc_tcd0_err_callback>
     d92:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <tc_tcd0_err_callback+0x1>
     d96:	30 97       	sbiw	r30, 0x00	; 0
     d98:	09 f0       	breq	.+2      	; 0xd9c <__vector_78+0x34>
		tc_tcd0_err_callback();
     d9a:	19 95       	eicall
	}
}
     d9c:	ff 91       	pop	r31
     d9e:	ef 91       	pop	r30
     da0:	bf 91       	pop	r27
     da2:	af 91       	pop	r26
     da4:	9f 91       	pop	r25
     da6:	8f 91       	pop	r24
     da8:	7f 91       	pop	r23
     daa:	6f 91       	pop	r22
     dac:	5f 91       	pop	r21
     dae:	4f 91       	pop	r20
     db0:	3f 91       	pop	r19
     db2:	2f 91       	pop	r18
     db4:	0f 90       	pop	r0
     db6:	0b be       	out	0x3b, r0	; 59
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     dc2:	1f 92       	push	r1
     dc4:	0f 92       	push	r0
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	0f 92       	push	r0
     dca:	11 24       	eor	r1, r1
     dcc:	0b b6       	in	r0, 0x3b	; 59
     dce:	0f 92       	push	r0
     dd0:	2f 93       	push	r18
     dd2:	3f 93       	push	r19
     dd4:	4f 93       	push	r20
     dd6:	5f 93       	push	r21
     dd8:	6f 93       	push	r22
     dda:	7f 93       	push	r23
     ddc:	8f 93       	push	r24
     dde:	9f 93       	push	r25
     de0:	af 93       	push	r26
     de2:	bf 93       	push	r27
     de4:	ef 93       	push	r30
     de6:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     de8:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <tc_tcd0_cca_callback>
     dec:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <tc_tcd0_cca_callback+0x1>
     df0:	30 97       	sbiw	r30, 0x00	; 0
     df2:	09 f0       	breq	.+2      	; 0xdf6 <__vector_79+0x34>
		tc_tcd0_cca_callback();
     df4:	19 95       	eicall
	}
}
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0b be       	out	0x3b, r0	; 59
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	0b b6       	in	r0, 0x3b	; 59
     e28:	0f 92       	push	r0
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	4f 93       	push	r20
     e30:	5f 93       	push	r21
     e32:	6f 93       	push	r22
     e34:	7f 93       	push	r23
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
     e3a:	af 93       	push	r26
     e3c:	bf 93       	push	r27
     e3e:	ef 93       	push	r30
     e40:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     e42:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <tc_tcd0_ccb_callback>
     e46:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <tc_tcd0_ccb_callback+0x1>
     e4a:	30 97       	sbiw	r30, 0x00	; 0
     e4c:	09 f0       	breq	.+2      	; 0xe50 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     e4e:	19 95       	eicall
	}
}
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	0b be       	out	0x3b, r0	; 59
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	0f 90       	pop	r0
     e72:	1f 90       	pop	r1
     e74:	18 95       	reti

00000e76 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     e76:	1f 92       	push	r1
     e78:	0f 92       	push	r0
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	0f 92       	push	r0
     e7e:	11 24       	eor	r1, r1
     e80:	0b b6       	in	r0, 0x3b	; 59
     e82:	0f 92       	push	r0
     e84:	2f 93       	push	r18
     e86:	3f 93       	push	r19
     e88:	4f 93       	push	r20
     e8a:	5f 93       	push	r21
     e8c:	6f 93       	push	r22
     e8e:	7f 93       	push	r23
     e90:	8f 93       	push	r24
     e92:	9f 93       	push	r25
     e94:	af 93       	push	r26
     e96:	bf 93       	push	r27
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     e9c:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <tc_tcd0_ccc_callback>
     ea0:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <tc_tcd0_ccc_callback+0x1>
     ea4:	30 97       	sbiw	r30, 0x00	; 0
     ea6:	09 f0       	breq	.+2      	; 0xeaa <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     ea8:	19 95       	eicall
	}
}
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0b be       	out	0x3b, r0	; 59
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     ed0:	1f 92       	push	r1
     ed2:	0f 92       	push	r0
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	0f 92       	push	r0
     ed8:	11 24       	eor	r1, r1
     eda:	0b b6       	in	r0, 0x3b	; 59
     edc:	0f 92       	push	r0
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	6f 93       	push	r22
     ee8:	7f 93       	push	r23
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     ef6:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <tc_tcd0_ccd_callback>
     efa:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <tc_tcd0_ccd_callback+0x1>
     efe:	30 97       	sbiw	r30, 0x00	; 0
     f00:	09 f0       	breq	.+2      	; 0xf04 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     f02:	19 95       	eicall
	}
}
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	7f 91       	pop	r23
     f12:	6f 91       	pop	r22
     f14:	5f 91       	pop	r21
     f16:	4f 91       	pop	r20
     f18:	3f 91       	pop	r19
     f1a:	2f 91       	pop	r18
     f1c:	0f 90       	pop	r0
     f1e:	0b be       	out	0x3b, r0	; 59
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     f50:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <tc_tcd1_ovf_callback>
     f54:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <tc_tcd1_ovf_callback+0x1>
     f58:	30 97       	sbiw	r30, 0x00	; 0
     f5a:	09 f0       	breq	.+2      	; 0xf5e <__vector_83+0x34>
		tc_tcd1_ovf_callback();
     f5c:	19 95       	eicall
	}
}
     f5e:	ff 91       	pop	r31
     f60:	ef 91       	pop	r30
     f62:	bf 91       	pop	r27
     f64:	af 91       	pop	r26
     f66:	9f 91       	pop	r25
     f68:	8f 91       	pop	r24
     f6a:	7f 91       	pop	r23
     f6c:	6f 91       	pop	r22
     f6e:	5f 91       	pop	r21
     f70:	4f 91       	pop	r20
     f72:	3f 91       	pop	r19
     f74:	2f 91       	pop	r18
     f76:	0f 90       	pop	r0
     f78:	0b be       	out	0x3b, r0	; 59
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	0b b6       	in	r0, 0x3b	; 59
     f90:	0f 92       	push	r0
     f92:	2f 93       	push	r18
     f94:	3f 93       	push	r19
     f96:	4f 93       	push	r20
     f98:	5f 93       	push	r21
     f9a:	6f 93       	push	r22
     f9c:	7f 93       	push	r23
     f9e:	8f 93       	push	r24
     fa0:	9f 93       	push	r25
     fa2:	af 93       	push	r26
     fa4:	bf 93       	push	r27
     fa6:	ef 93       	push	r30
     fa8:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     faa:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <tc_tcd1_err_callback>
     fae:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <tc_tcd1_err_callback+0x1>
     fb2:	30 97       	sbiw	r30, 0x00	; 0
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <__vector_84+0x34>
		tc_tcd1_err_callback();
     fb6:	19 95       	eicall
	}
}
     fb8:	ff 91       	pop	r31
     fba:	ef 91       	pop	r30
     fbc:	bf 91       	pop	r27
     fbe:	af 91       	pop	r26
     fc0:	9f 91       	pop	r25
     fc2:	8f 91       	pop	r24
     fc4:	7f 91       	pop	r23
     fc6:	6f 91       	pop	r22
     fc8:	5f 91       	pop	r21
     fca:	4f 91       	pop	r20
     fcc:	3f 91       	pop	r19
     fce:	2f 91       	pop	r18
     fd0:	0f 90       	pop	r0
     fd2:	0b be       	out	0x3b, r0	; 59
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	0f 90       	pop	r0
     fda:	1f 90       	pop	r1
     fdc:	18 95       	reti

00000fde <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     fde:	1f 92       	push	r1
     fe0:	0f 92       	push	r0
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	0f 92       	push	r0
     fe6:	11 24       	eor	r1, r1
     fe8:	0b b6       	in	r0, 0x3b	; 59
     fea:	0f 92       	push	r0
     fec:	2f 93       	push	r18
     fee:	3f 93       	push	r19
     ff0:	4f 93       	push	r20
     ff2:	5f 93       	push	r21
     ff4:	6f 93       	push	r22
     ff6:	7f 93       	push	r23
     ff8:	8f 93       	push	r24
     ffa:	9f 93       	push	r25
     ffc:	af 93       	push	r26
     ffe:	bf 93       	push	r27
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1004:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tcd1_cca_callback>
    1008:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tcd1_cca_callback+0x1>
    100c:	30 97       	sbiw	r30, 0x00	; 0
    100e:	09 f0       	breq	.+2      	; 0x1012 <__vector_85+0x34>
		tc_tcd1_cca_callback();
    1010:	19 95       	eicall
	}
}
    1012:	ff 91       	pop	r31
    1014:	ef 91       	pop	r30
    1016:	bf 91       	pop	r27
    1018:	af 91       	pop	r26
    101a:	9f 91       	pop	r25
    101c:	8f 91       	pop	r24
    101e:	7f 91       	pop	r23
    1020:	6f 91       	pop	r22
    1022:	5f 91       	pop	r21
    1024:	4f 91       	pop	r20
    1026:	3f 91       	pop	r19
    1028:	2f 91       	pop	r18
    102a:	0f 90       	pop	r0
    102c:	0b be       	out	0x3b, r0	; 59
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	0f 92       	push	r0
    1040:	11 24       	eor	r1, r1
    1042:	0b b6       	in	r0, 0x3b	; 59
    1044:	0f 92       	push	r0
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    105e:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tcd1_ccb_callback>
    1062:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tcd1_ccb_callback+0x1>
    1066:	30 97       	sbiw	r30, 0x00	; 0
    1068:	09 f0       	breq	.+2      	; 0x106c <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    106a:	19 95       	eicall
	}
}
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	0f 90       	pop	r0
    1086:	0b be       	out	0x3b, r0	; 59
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	0b b6       	in	r0, 0x3b	; 59
    109e:	0f 92       	push	r0
    10a0:	2f 93       	push	r18
    10a2:	3f 93       	push	r19
    10a4:	4f 93       	push	r20
    10a6:	5f 93       	push	r21
    10a8:	6f 93       	push	r22
    10aa:	7f 93       	push	r23
    10ac:	8f 93       	push	r24
    10ae:	9f 93       	push	r25
    10b0:	af 93       	push	r26
    10b2:	bf 93       	push	r27
    10b4:	ef 93       	push	r30
    10b6:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    10b8:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tce0_ovf_callback>
    10bc:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tce0_ovf_callback+0x1>
    10c0:	30 97       	sbiw	r30, 0x00	; 0
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    10c4:	19 95       	eicall
	}
}
    10c6:	ff 91       	pop	r31
    10c8:	ef 91       	pop	r30
    10ca:	bf 91       	pop	r27
    10cc:	af 91       	pop	r26
    10ce:	9f 91       	pop	r25
    10d0:	8f 91       	pop	r24
    10d2:	7f 91       	pop	r23
    10d4:	6f 91       	pop	r22
    10d6:	5f 91       	pop	r21
    10d8:	4f 91       	pop	r20
    10da:	3f 91       	pop	r19
    10dc:	2f 91       	pop	r18
    10de:	0f 90       	pop	r0
    10e0:	0b be       	out	0x3b, r0	; 59
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	0b b6       	in	r0, 0x3b	; 59
    10f8:	0f 92       	push	r0
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1112:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tce0_err_callback>
    1116:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tce0_err_callback+0x1>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <__vector_48+0x34>
		tc_tce0_err_callback();
    111e:	19 95       	eicall
	}
}
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0b be       	out	0x3b, r0	; 59
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	0f 90       	pop	r0
    1142:	1f 90       	pop	r1
    1144:	18 95       	reti

00001146 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	11 24       	eor	r1, r1
    1150:	0b b6       	in	r0, 0x3b	; 59
    1152:	0f 92       	push	r0
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    116c:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tce0_cca_callback>
    1170:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tce0_cca_callback+0x1>
    1174:	30 97       	sbiw	r30, 0x00	; 0
    1176:	09 f0       	breq	.+2      	; 0x117a <__vector_49+0x34>
		tc_tce0_cca_callback();
    1178:	19 95       	eicall
	}
}
    117a:	ff 91       	pop	r31
    117c:	ef 91       	pop	r30
    117e:	bf 91       	pop	r27
    1180:	af 91       	pop	r26
    1182:	9f 91       	pop	r25
    1184:	8f 91       	pop	r24
    1186:	7f 91       	pop	r23
    1188:	6f 91       	pop	r22
    118a:	5f 91       	pop	r21
    118c:	4f 91       	pop	r20
    118e:	3f 91       	pop	r19
    1190:	2f 91       	pop	r18
    1192:	0f 90       	pop	r0
    1194:	0b be       	out	0x3b, r0	; 59
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0f 90       	pop	r0
    119c:	1f 90       	pop	r1
    119e:	18 95       	reti

000011a0 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	0b b6       	in	r0, 0x3b	; 59
    11ac:	0f 92       	push	r0
    11ae:	2f 93       	push	r18
    11b0:	3f 93       	push	r19
    11b2:	4f 93       	push	r20
    11b4:	5f 93       	push	r21
    11b6:	6f 93       	push	r22
    11b8:	7f 93       	push	r23
    11ba:	8f 93       	push	r24
    11bc:	9f 93       	push	r25
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
    11c2:	ef 93       	push	r30
    11c4:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    11c6:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <tc_tce0_ccb_callback>
    11ca:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <tc_tce0_ccb_callback+0x1>
    11ce:	30 97       	sbiw	r30, 0x00	; 0
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    11d2:	19 95       	eicall
	}
}
    11d4:	ff 91       	pop	r31
    11d6:	ef 91       	pop	r30
    11d8:	bf 91       	pop	r27
    11da:	af 91       	pop	r26
    11dc:	9f 91       	pop	r25
    11de:	8f 91       	pop	r24
    11e0:	7f 91       	pop	r23
    11e2:	6f 91       	pop	r22
    11e4:	5f 91       	pop	r21
    11e6:	4f 91       	pop	r20
    11e8:	3f 91       	pop	r19
    11ea:	2f 91       	pop	r18
    11ec:	0f 90       	pop	r0
    11ee:	0b be       	out	0x3b, r0	; 59
    11f0:	0f 90       	pop	r0
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	0f 90       	pop	r0
    11f6:	1f 90       	pop	r1
    11f8:	18 95       	reti

000011fa <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    11fa:	1f 92       	push	r1
    11fc:	0f 92       	push	r0
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	0f 92       	push	r0
    1202:	11 24       	eor	r1, r1
    1204:	0b b6       	in	r0, 0x3b	; 59
    1206:	0f 92       	push	r0
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1220:	e0 91 3c 20 	lds	r30, 0x203C	; 0x80203c <tc_tce0_ccc_callback>
    1224:	f0 91 3d 20 	lds	r31, 0x203D	; 0x80203d <tc_tce0_ccc_callback+0x1>
    1228:	30 97       	sbiw	r30, 0x00	; 0
    122a:	09 f0       	breq	.+2      	; 0x122e <__vector_51+0x34>
		tc_tce0_ccc_callback();
    122c:	19 95       	eicall
	}
}
    122e:	ff 91       	pop	r31
    1230:	ef 91       	pop	r30
    1232:	bf 91       	pop	r27
    1234:	af 91       	pop	r26
    1236:	9f 91       	pop	r25
    1238:	8f 91       	pop	r24
    123a:	7f 91       	pop	r23
    123c:	6f 91       	pop	r22
    123e:	5f 91       	pop	r21
    1240:	4f 91       	pop	r20
    1242:	3f 91       	pop	r19
    1244:	2f 91       	pop	r18
    1246:	0f 90       	pop	r0
    1248:	0b be       	out	0x3b, r0	; 59
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	0f 90       	pop	r0
    1250:	1f 90       	pop	r1
    1252:	18 95       	reti

00001254 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1254:	1f 92       	push	r1
    1256:	0f 92       	push	r0
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	0f 92       	push	r0
    125c:	11 24       	eor	r1, r1
    125e:	0b b6       	in	r0, 0x3b	; 59
    1260:	0f 92       	push	r0
    1262:	2f 93       	push	r18
    1264:	3f 93       	push	r19
    1266:	4f 93       	push	r20
    1268:	5f 93       	push	r21
    126a:	6f 93       	push	r22
    126c:	7f 93       	push	r23
    126e:	8f 93       	push	r24
    1270:	9f 93       	push	r25
    1272:	af 93       	push	r26
    1274:	bf 93       	push	r27
    1276:	ef 93       	push	r30
    1278:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    127a:	e0 91 3a 20 	lds	r30, 0x203A	; 0x80203a <tc_tce0_ccd_callback>
    127e:	f0 91 3b 20 	lds	r31, 0x203B	; 0x80203b <tc_tce0_ccd_callback+0x1>
    1282:	30 97       	sbiw	r30, 0x00	; 0
    1284:	09 f0       	breq	.+2      	; 0x1288 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    1286:	19 95       	eicall
	}
}
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0b be       	out	0x3b, r0	; 59
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	0b b6       	in	r0, 0x3b	; 59
    12ba:	0f 92       	push	r0
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    12d4:	e0 91 38 20 	lds	r30, 0x2038	; 0x802038 <tc_tce1_ovf_callback>
    12d8:	f0 91 39 20 	lds	r31, 0x2039	; 0x802039 <tc_tce1_ovf_callback+0x1>
    12dc:	30 97       	sbiw	r30, 0x00	; 0
    12de:	09 f0       	breq	.+2      	; 0x12e2 <__vector_53+0x34>
		tc_tce1_ovf_callback();
    12e0:	19 95       	eicall
	}
}
    12e2:	ff 91       	pop	r31
    12e4:	ef 91       	pop	r30
    12e6:	bf 91       	pop	r27
    12e8:	af 91       	pop	r26
    12ea:	9f 91       	pop	r25
    12ec:	8f 91       	pop	r24
    12ee:	7f 91       	pop	r23
    12f0:	6f 91       	pop	r22
    12f2:	5f 91       	pop	r21
    12f4:	4f 91       	pop	r20
    12f6:	3f 91       	pop	r19
    12f8:	2f 91       	pop	r18
    12fa:	0f 90       	pop	r0
    12fc:	0b be       	out	0x3b, r0	; 59
    12fe:	0f 90       	pop	r0
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	0f 90       	pop	r0
    1304:	1f 90       	pop	r1
    1306:	18 95       	reti

00001308 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1308:	1f 92       	push	r1
    130a:	0f 92       	push	r0
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	0f 92       	push	r0
    1310:	11 24       	eor	r1, r1
    1312:	0b b6       	in	r0, 0x3b	; 59
    1314:	0f 92       	push	r0
    1316:	2f 93       	push	r18
    1318:	3f 93       	push	r19
    131a:	4f 93       	push	r20
    131c:	5f 93       	push	r21
    131e:	6f 93       	push	r22
    1320:	7f 93       	push	r23
    1322:	8f 93       	push	r24
    1324:	9f 93       	push	r25
    1326:	af 93       	push	r26
    1328:	bf 93       	push	r27
    132a:	ef 93       	push	r30
    132c:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    132e:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <tc_tce1_err_callback>
    1332:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <tc_tce1_err_callback+0x1>
    1336:	30 97       	sbiw	r30, 0x00	; 0
    1338:	09 f0       	breq	.+2      	; 0x133c <__vector_54+0x34>
		tc_tce1_err_callback();
    133a:	19 95       	eicall
	}
}
    133c:	ff 91       	pop	r31
    133e:	ef 91       	pop	r30
    1340:	bf 91       	pop	r27
    1342:	af 91       	pop	r26
    1344:	9f 91       	pop	r25
    1346:	8f 91       	pop	r24
    1348:	7f 91       	pop	r23
    134a:	6f 91       	pop	r22
    134c:	5f 91       	pop	r21
    134e:	4f 91       	pop	r20
    1350:	3f 91       	pop	r19
    1352:	2f 91       	pop	r18
    1354:	0f 90       	pop	r0
    1356:	0b be       	out	0x3b, r0	; 59
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	0f 90       	pop	r0
    135e:	1f 90       	pop	r1
    1360:	18 95       	reti

00001362 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1362:	1f 92       	push	r1
    1364:	0f 92       	push	r0
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	0f 92       	push	r0
    136a:	11 24       	eor	r1, r1
    136c:	0b b6       	in	r0, 0x3b	; 59
    136e:	0f 92       	push	r0
    1370:	2f 93       	push	r18
    1372:	3f 93       	push	r19
    1374:	4f 93       	push	r20
    1376:	5f 93       	push	r21
    1378:	6f 93       	push	r22
    137a:	7f 93       	push	r23
    137c:	8f 93       	push	r24
    137e:	9f 93       	push	r25
    1380:	af 93       	push	r26
    1382:	bf 93       	push	r27
    1384:	ef 93       	push	r30
    1386:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1388:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <tc_tce1_cca_callback>
    138c:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <tc_tce1_cca_callback+0x1>
    1390:	30 97       	sbiw	r30, 0x00	; 0
    1392:	09 f0       	breq	.+2      	; 0x1396 <__vector_55+0x34>
		tc_tce1_cca_callback();
    1394:	19 95       	eicall
	}
}
    1396:	ff 91       	pop	r31
    1398:	ef 91       	pop	r30
    139a:	bf 91       	pop	r27
    139c:	af 91       	pop	r26
    139e:	9f 91       	pop	r25
    13a0:	8f 91       	pop	r24
    13a2:	7f 91       	pop	r23
    13a4:	6f 91       	pop	r22
    13a6:	5f 91       	pop	r21
    13a8:	4f 91       	pop	r20
    13aa:	3f 91       	pop	r19
    13ac:	2f 91       	pop	r18
    13ae:	0f 90       	pop	r0
    13b0:	0b be       	out	0x3b, r0	; 59
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    13bc:	1f 92       	push	r1
    13be:	0f 92       	push	r0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	0b b6       	in	r0, 0x3b	; 59
    13c8:	0f 92       	push	r0
    13ca:	2f 93       	push	r18
    13cc:	3f 93       	push	r19
    13ce:	4f 93       	push	r20
    13d0:	5f 93       	push	r21
    13d2:	6f 93       	push	r22
    13d4:	7f 93       	push	r23
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	af 93       	push	r26
    13dc:	bf 93       	push	r27
    13de:	ef 93       	push	r30
    13e0:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    13e2:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <tc_tce1_ccb_callback>
    13e6:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <tc_tce1_ccb_callback+0x1>
    13ea:	30 97       	sbiw	r30, 0x00	; 0
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    13ee:	19 95       	eicall
	}
}
    13f0:	ff 91       	pop	r31
    13f2:	ef 91       	pop	r30
    13f4:	bf 91       	pop	r27
    13f6:	af 91       	pop	r26
    13f8:	9f 91       	pop	r25
    13fa:	8f 91       	pop	r24
    13fc:	7f 91       	pop	r23
    13fe:	6f 91       	pop	r22
    1400:	5f 91       	pop	r21
    1402:	4f 91       	pop	r20
    1404:	3f 91       	pop	r19
    1406:	2f 91       	pop	r18
    1408:	0f 90       	pop	r0
    140a:	0b be       	out	0x3b, r0	; 59
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	0b b6       	in	r0, 0x3b	; 59
    1422:	0f 92       	push	r0
    1424:	2f 93       	push	r18
    1426:	3f 93       	push	r19
    1428:	4f 93       	push	r20
    142a:	5f 93       	push	r21
    142c:	6f 93       	push	r22
    142e:	7f 93       	push	r23
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    143c:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <tc_tcf0_ovf_callback>
    1440:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <tc_tcf0_ovf_callback+0x1>
    1444:	30 97       	sbiw	r30, 0x00	; 0
    1446:	09 f0       	breq	.+2      	; 0x144a <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1448:	19 95       	eicall
	}
}
    144a:	ff 91       	pop	r31
    144c:	ef 91       	pop	r30
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	7f 91       	pop	r23
    1458:	6f 91       	pop	r22
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	0f 90       	pop	r0
    1464:	0b be       	out	0x3b, r0	; 59
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	0b b6       	in	r0, 0x3b	; 59
    147c:	0f 92       	push	r0
    147e:	2f 93       	push	r18
    1480:	3f 93       	push	r19
    1482:	4f 93       	push	r20
    1484:	5f 93       	push	r21
    1486:	6f 93       	push	r22
    1488:	7f 93       	push	r23
    148a:	8f 93       	push	r24
    148c:	9f 93       	push	r25
    148e:	af 93       	push	r26
    1490:	bf 93       	push	r27
    1492:	ef 93       	push	r30
    1494:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1496:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <tc_tcf0_err_callback>
    149a:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <tc_tcf0_err_callback+0x1>
    149e:	30 97       	sbiw	r30, 0x00	; 0
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <__vector_109+0x34>
		tc_tcf0_err_callback();
    14a2:	19 95       	eicall
	}
}
    14a4:	ff 91       	pop	r31
    14a6:	ef 91       	pop	r30
    14a8:	bf 91       	pop	r27
    14aa:	af 91       	pop	r26
    14ac:	9f 91       	pop	r25
    14ae:	8f 91       	pop	r24
    14b0:	7f 91       	pop	r23
    14b2:	6f 91       	pop	r22
    14b4:	5f 91       	pop	r21
    14b6:	4f 91       	pop	r20
    14b8:	3f 91       	pop	r19
    14ba:	2f 91       	pop	r18
    14bc:	0f 90       	pop	r0
    14be:	0b be       	out	0x3b, r0	; 59
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	0f 90       	pop	r0
    14c6:	1f 90       	pop	r1
    14c8:	18 95       	reti

000014ca <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    14ca:	1f 92       	push	r1
    14cc:	0f 92       	push	r0
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	0f 92       	push	r0
    14d2:	11 24       	eor	r1, r1
    14d4:	0b b6       	in	r0, 0x3b	; 59
    14d6:	0f 92       	push	r0
    14d8:	2f 93       	push	r18
    14da:	3f 93       	push	r19
    14dc:	4f 93       	push	r20
    14de:	5f 93       	push	r21
    14e0:	6f 93       	push	r22
    14e2:	7f 93       	push	r23
    14e4:	8f 93       	push	r24
    14e6:	9f 93       	push	r25
    14e8:	af 93       	push	r26
    14ea:	bf 93       	push	r27
    14ec:	ef 93       	push	r30
    14ee:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    14f0:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <tc_tcf0_cca_callback>
    14f4:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <tc_tcf0_cca_callback+0x1>
    14f8:	30 97       	sbiw	r30, 0x00	; 0
    14fa:	09 f0       	breq	.+2      	; 0x14fe <__vector_110+0x34>
		tc_tcf0_cca_callback();
    14fc:	19 95       	eicall
	}
}
    14fe:	ff 91       	pop	r31
    1500:	ef 91       	pop	r30
    1502:	bf 91       	pop	r27
    1504:	af 91       	pop	r26
    1506:	9f 91       	pop	r25
    1508:	8f 91       	pop	r24
    150a:	7f 91       	pop	r23
    150c:	6f 91       	pop	r22
    150e:	5f 91       	pop	r21
    1510:	4f 91       	pop	r20
    1512:	3f 91       	pop	r19
    1514:	2f 91       	pop	r18
    1516:	0f 90       	pop	r0
    1518:	0b be       	out	0x3b, r0	; 59
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1524:	1f 92       	push	r1
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	0b b6       	in	r0, 0x3b	; 59
    1530:	0f 92       	push	r0
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	4f 93       	push	r20
    1538:	5f 93       	push	r21
    153a:	6f 93       	push	r22
    153c:	7f 93       	push	r23
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	af 93       	push	r26
    1544:	bf 93       	push	r27
    1546:	ef 93       	push	r30
    1548:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    154a:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <tc_tcf0_ccb_callback>
    154e:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <tc_tcf0_ccb_callback+0x1>
    1552:	30 97       	sbiw	r30, 0x00	; 0
    1554:	09 f0       	breq	.+2      	; 0x1558 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1556:	19 95       	eicall
	}
}
    1558:	ff 91       	pop	r31
    155a:	ef 91       	pop	r30
    155c:	bf 91       	pop	r27
    155e:	af 91       	pop	r26
    1560:	9f 91       	pop	r25
    1562:	8f 91       	pop	r24
    1564:	7f 91       	pop	r23
    1566:	6f 91       	pop	r22
    1568:	5f 91       	pop	r21
    156a:	4f 91       	pop	r20
    156c:	3f 91       	pop	r19
    156e:	2f 91       	pop	r18
    1570:	0f 90       	pop	r0
    1572:	0b be       	out	0x3b, r0	; 59
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	0b b6       	in	r0, 0x3b	; 59
    158a:	0f 92       	push	r0
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    15a4:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <tc_tcf0_ccc_callback>
    15a8:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <tc_tcf0_ccc_callback+0x1>
    15ac:	30 97       	sbiw	r30, 0x00	; 0
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    15b0:	19 95       	eicall
	}
}
    15b2:	ff 91       	pop	r31
    15b4:	ef 91       	pop	r30
    15b6:	bf 91       	pop	r27
    15b8:	af 91       	pop	r26
    15ba:	9f 91       	pop	r25
    15bc:	8f 91       	pop	r24
    15be:	7f 91       	pop	r23
    15c0:	6f 91       	pop	r22
    15c2:	5f 91       	pop	r21
    15c4:	4f 91       	pop	r20
    15c6:	3f 91       	pop	r19
    15c8:	2f 91       	pop	r18
    15ca:	0f 90       	pop	r0
    15cc:	0b be       	out	0x3b, r0	; 59
    15ce:	0f 90       	pop	r0
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	0f 90       	pop	r0
    15d4:	1f 90       	pop	r1
    15d6:	18 95       	reti

000015d8 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    15d8:	1f 92       	push	r1
    15da:	0f 92       	push	r0
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	0f 92       	push	r0
    15e0:	11 24       	eor	r1, r1
    15e2:	0b b6       	in	r0, 0x3b	; 59
    15e4:	0f 92       	push	r0
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
    15fc:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    15fe:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <tc_tcf0_ccd_callback>
    1602:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <tc_tcf0_ccd_callback+0x1>
    1606:	30 97       	sbiw	r30, 0x00	; 0
    1608:	09 f0       	breq	.+2      	; 0x160c <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    160a:	19 95       	eicall
	}
}
    160c:	ff 91       	pop	r31
    160e:	ef 91       	pop	r30
    1610:	bf 91       	pop	r27
    1612:	af 91       	pop	r26
    1614:	9f 91       	pop	r25
    1616:	8f 91       	pop	r24
    1618:	7f 91       	pop	r23
    161a:	6f 91       	pop	r22
    161c:	5f 91       	pop	r21
    161e:	4f 91       	pop	r20
    1620:	3f 91       	pop	r19
    1622:	2f 91       	pop	r18
    1624:	0f 90       	pop	r0
    1626:	0b be       	out	0x3b, r0	; 59
    1628:	0f 90       	pop	r0
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	0f 90       	pop	r0
    162e:	1f 90       	pop	r1
    1630:	18 95       	reti

00001632 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1632:	1f 93       	push	r17
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	1f 92       	push	r1
    163a:	1f 92       	push	r1
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1640:	2f b7       	in	r18, 0x3f	; 63
    1642:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    1644:	f8 94       	cli
	return flags;
    1646:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1648:	28 2f       	mov	r18, r24
    164a:	39 2f       	mov	r19, r25
    164c:	21 15       	cp	r18, r1
    164e:	88 e0       	ldi	r24, 0x08	; 8
    1650:	38 07       	cpc	r19, r24
    1652:	39 f4       	brne	.+14     	; 0x1662 <tc_enable+0x30>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	83 e0       	ldi	r24, 0x03	; 3
    1658:	85 d1       	rcall	.+778    	; 0x1964 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    165a:	64 e0       	ldi	r22, 0x04	; 4
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	82 d1       	rcall	.+772    	; 0x1964 <sysclk_enable_module>
    1660:	43 c0       	rjmp	.+134    	; 0x16e8 <tc_enable+0xb6>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1662:	20 34       	cpi	r18, 0x40	; 64
    1664:	88 e0       	ldi	r24, 0x08	; 8
    1666:	38 07       	cpc	r19, r24
    1668:	39 f4       	brne	.+14     	; 0x1678 <tc_enable+0x46>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    166a:	62 e0       	ldi	r22, 0x02	; 2
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	7a d1       	rcall	.+756    	; 0x1964 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1670:	64 e0       	ldi	r22, 0x04	; 4
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	77 d1       	rcall	.+750    	; 0x1964 <sysclk_enable_module>
    1676:	38 c0       	rjmp	.+112    	; 0x16e8 <tc_enable+0xb6>
    1678:	21 15       	cp	r18, r1
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    167a:	89 e0       	ldi	r24, 0x09	; 9
    167c:	38 07       	cpc	r19, r24
    167e:	39 f4       	brne	.+14     	; 0x168e <tc_enable+0x5c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	84 e0       	ldi	r24, 0x04	; 4
    1684:	6f d1       	rcall	.+734    	; 0x1964 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1686:	64 e0       	ldi	r22, 0x04	; 4
    1688:	84 e0       	ldi	r24, 0x04	; 4
    168a:	6c d1       	rcall	.+728    	; 0x1964 <sysclk_enable_module>
    168c:	2d c0       	rjmp	.+90     	; 0x16e8 <tc_enable+0xb6>
    168e:	20 34       	cpi	r18, 0x40	; 64
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1690:	89 e0       	ldi	r24, 0x09	; 9
    1692:	38 07       	cpc	r19, r24
    1694:	39 f4       	brne	.+14     	; 0x16a4 <tc_enable+0x72>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1696:	62 e0       	ldi	r22, 0x02	; 2
    1698:	84 e0       	ldi	r24, 0x04	; 4
    169a:	64 d1       	rcall	.+712    	; 0x1964 <sysclk_enable_module>
    169c:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    169e:	84 e0       	ldi	r24, 0x04	; 4
    16a0:	61 d1       	rcall	.+706    	; 0x1964 <sysclk_enable_module>
    16a2:	22 c0       	rjmp	.+68     	; 0x16e8 <tc_enable+0xb6>
    16a4:	21 15       	cp	r18, r1
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    16a6:	8a e0       	ldi	r24, 0x0A	; 10
    16a8:	38 07       	cpc	r19, r24
    16aa:	39 f4       	brne	.+14     	; 0x16ba <tc_enable+0x88>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	85 e0       	ldi	r24, 0x05	; 5
    16b0:	59 d1       	rcall	.+690    	; 0x1964 <sysclk_enable_module>
    16b2:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    16b4:	85 e0       	ldi	r24, 0x05	; 5
    16b6:	56 d1       	rcall	.+684    	; 0x1964 <sysclk_enable_module>
    16b8:	17 c0       	rjmp	.+46     	; 0x16e8 <tc_enable+0xb6>
    16ba:	20 34       	cpi	r18, 0x40	; 64
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    16bc:	8a e0       	ldi	r24, 0x0A	; 10
    16be:	38 07       	cpc	r19, r24
    16c0:	39 f4       	brne	.+14     	; 0x16d0 <tc_enable+0x9e>
    16c2:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    16c4:	85 e0       	ldi	r24, 0x05	; 5
    16c6:	4e d1       	rcall	.+668    	; 0x1964 <sysclk_enable_module>
    16c8:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    16ca:	85 e0       	ldi	r24, 0x05	; 5
    16cc:	4b d1       	rcall	.+662    	; 0x1964 <sysclk_enable_module>
    16ce:	0c c0       	rjmp	.+24     	; 0x16e8 <tc_enable+0xb6>
    16d0:	21 15       	cp	r18, r1
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    16d2:	3b 40       	sbci	r19, 0x0B	; 11
    16d4:	39 f4       	brne	.+14     	; 0x16e4 <tc_enable+0xb2>
    16d6:	61 e0       	ldi	r22, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    16d8:	86 e0       	ldi	r24, 0x06	; 6
    16da:	44 d1       	rcall	.+648    	; 0x1964 <sysclk_enable_module>
    16dc:	64 e0       	ldi	r22, 0x04	; 4
    16de:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    16e0:	41 d1       	rcall	.+642    	; 0x1964 <sysclk_enable_module>
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <tc_enable+0xb6>
    16e4:	1f bf       	out	0x3f, r17	; 63
    16e6:	10 c0       	rjmp	.+32     	; 0x1708 <tc_enable+0xd6>
    16e8:	80 91 7d 20 	lds	r24, 0x207D	; 0x80207d <sleepmgr_locks+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    16ec:	8f 3f       	cpi	r24, 0xFF	; 255
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <tc_enable+0xc0>
    16f0:	ff cf       	rjmp	.-2      	; 0x16f0 <tc_enable+0xbe>
    16f2:	8f b7       	in	r24, 0x3f	; 63
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    16f8:	99 81       	ldd	r25, Y+1	; 0x01
    16fa:	ec e7       	ldi	r30, 0x7C	; 124
	cpu_irq_disable();
    16fc:	f0 e2       	ldi	r31, 0x20	; 32
	return flags;
    16fe:	81 81       	ldd	r24, Z+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1700:	8f 5f       	subi	r24, 0xFF	; 255
    1702:	81 83       	std	Z+1, r24	; 0x01
    1704:	9f bf       	out	0x3f, r25	; 63
    1706:	1f bf       	out	0x3f, r17	; 63
    1708:	0f 90       	pop	r0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    170a:	0f 90       	pop	r0
    170c:	df 91       	pop	r29
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	08 95       	ret

00001714 <usartf0_init>:

union txbuffer_element fifo_txbuf[txbuf_size];
//fifo_desc_t txfifo_desc;

void usartf0_init(void)
{
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	27 97       	sbiw	r28, 0x07	; 7
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	de bf       	out	0x3e, r29	; 62
	UART0PORT.DIRSET = UARTF0_TXbm; //set output
    1722:	e0 ea       	ldi	r30, 0xA0	; 160
    1724:	f6 e0       	ldi	r31, 0x06	; 6
    1726:	88 e0       	ldi	r24, 0x08	; 8
    1728:	81 83       	std	Z+1, r24	; 0x01
	UART0PORT.DIRCLR = UARTF0_RXbm; //set input
    172a:	84 e0       	ldi	r24, 0x04	; 4
    172c:	82 83       	std	Z+2, r24	; 0x02
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    172e:	eb e0       	ldi	r30, 0x0B	; 11
    1730:	f0 e2       	ldi	r31, 0x20	; 32
    1732:	84 81       	ldd	r24, Z+4	; 0x04
    1734:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1736:	85 81       	ldd	r24, Z+5	; 0x05
    1738:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    173a:	86 81       	ldd	r24, Z+6	; 0x06
    173c:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	a2 81       	ldd	r26, Z+2	; 0x02
    1744:	b3 81       	ldd	r27, Z+3	; 0x03
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	ab 83       	std	Y+3, r26	; 0x03
    174c:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    174e:	60 e1       	ldi	r22, 0x10	; 16
    1750:	86 e0       	ldi	r24, 0x06	; 6
    1752:	08 d1       	rcall	.+528    	; 0x1964 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1754:	be 01       	movw	r22, r28
    1756:	6f 5f       	subi	r22, 0xFF	; 255
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	80 ea       	ldi	r24, 0xA0	; 160
    175c:	9b e0       	ldi	r25, 0x0B	; 11
    175e:	49 d2       	rcall	.+1170   	; 0x1bf2 <usart_init_rs232>
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
    1760:	e0 ea       	ldi	r30, 0xA0	; 160
    1762:	fb e0       	ldi	r31, 0x0B	; 11
    1764:	83 81       	ldd	r24, Z+3	; 0x03
    1766:	8f 7c       	andi	r24, 0xCF	; 207
    1768:	80 61       	ori	r24, 0x10	; 16
    176a:	83 83       	std	Z+3, r24	; 0x03
 *              Use USART_DREINTLVL_t type.
 */
static inline void usart_set_dre_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_DREINTLVL_gm) |
    176c:	83 81       	ldd	r24, Z+3	; 0x03
    176e:	8c 7f       	andi	r24, 0xFC	; 252
    1770:	83 83       	std	Z+3, r24	; 0x03
	USART_INT_LVL_HI
	*/
	usart_set_rx_interrupt_level(USART_SERIAL, USART_INT_LVL);		//rx IT level LO
	usart_set_dre_interrupt_level(USART_SERIAL, USART_INT_LVL_OFF);		//tx IT disable
	
	fifo_init(&rxfifo_desc, fifo_rxbuf, rxbuf_size);					//Initialize the rx FIFO
    1772:	40 e1       	ldi	r20, 0x10	; 16
    1774:	66 e0       	ldi	r22, 0x06	; 6
    1776:	71 e2       	ldi	r23, 0x21	; 33
    1778:	86 e7       	ldi	r24, 0x76	; 118
    177a:	90 e2       	ldi	r25, 0x20	; 32
    177c:	1e d1       	rcall	.+572    	; 0x19ba <fifo_init>
	fifo_init(&txfifo_desc, fifo_txbuf, txbuf_size);					//Initialize the tx FIFO
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	66 e8       	ldi	r22, 0x86	; 134
    1782:	70 e2       	ldi	r23, 0x20	; 32
    1784:	80 e7       	ldi	r24, 0x70	; 112
    1786:	90 e2       	ldi	r25, 0x20	; 32
    1788:	18 d1       	rcall	.+560    	; 0x19ba <fifo_init>
	transmit_stop = 1;	
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <transmit_stop>
    1792:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <transmit_stop+0x1>
}
    1796:	27 96       	adiw	r28, 0x07	; 7
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <get_char>:

uint8_t get_char(char *chr)
{
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	ec 01       	movw	r28, r24
 *    \retval true when the FIFO is empty.
 *    \retval false when the FIFO is not empty.
 */
static inline bool fifo_is_empty(fifo_desc_t *fifo_desc)
{
	return (fifo_desc->write_index == fifo_desc->read_index);
    17a8:	e6 e7       	ldi	r30, 0x76	; 118
    17aa:	f0 e2       	ldi	r31, 0x20	; 32
    17ac:	23 81       	ldd	r18, Z+3	; 0x03
    17ae:	92 81       	ldd	r25, Z+2	; 0x02
	uint8_t retval = 0;
	if(!fifo_is_empty(&rxfifo_desc))
    17b0:	29 17       	cp	r18, r25
    17b2:	81 f0       	breq	.+32     	; 0x17d4 <get_char+0x32>
static inline uint8_t fifo_pull_uint8_nocheck(fifo_desc_t *fifo_desc)
{
	uint8_t read_index;
	uint8_t item;

	read_index = fifo_desc->read_index;
    17b4:	22 81       	ldd	r18, Z+2	; 0x02
	item = fifo_desc->buffer.u8ptr[read_index & (fifo_desc->mask >> 1)];
    17b6:	a0 81       	ld	r26, Z
    17b8:	b1 81       	ldd	r27, Z+1	; 0x01
    17ba:	95 81       	ldd	r25, Z+5	; 0x05
    17bc:	39 2f       	mov	r19, r25
    17be:	36 95       	lsr	r19
    17c0:	32 23       	and	r19, r18
    17c2:	a3 0f       	add	r26, r19
    17c4:	b1 1d       	adc	r27, r1
    17c6:	8c 91       	ld	r24, X
	read_index = (read_index + 1) & fifo_desc->mask;
    17c8:	2f 5f       	subi	r18, 0xFF	; 255
    17ca:	92 23       	and	r25, r18

	// Must be the last thing to do.
	barrier();
	fifo_desc->read_index = read_index;
    17cc:	92 83       	std	Z+2, r25	; 0x02
	{
		*chr = fifo_pull_uint8_nocheck(&rxfifo_desc);
    17ce:	88 83       	st	Y, r24
		retval = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <get_char+0x34>
	transmit_stop = 1;	
}

uint8_t get_char(char *chr)
{
	uint8_t retval = 0;
    17d4:	80 e0       	ldi	r24, 0x00	; 0
	{
		*chr = fifo_pull_uint8_nocheck(&rxfifo_desc);
		retval = 1;
	}
	return(retval);
}
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <usart_putstring>:

void usart_putstring(const char str[])
{	
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	dc 01       	movw	r26, r24
 *    \retval true when the FIFO is empty.
 *    \retval false when the FIFO is not empty.
 */
static inline bool fifo_is_empty(fifo_desc_t *fifo_desc)
{
	return (fifo_desc->write_index == fifo_desc->read_index);
    17e2:	e0 e7       	ldi	r30, 0x70	; 112
    17e4:	f0 e2       	ldi	r31, 0x20	; 32
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	82 81       	ldd	r24, Z+2	; 0x02
	while(!fifo_is_empty(&txfifo_desc)){}	
    17ea:	98 13       	cpse	r25, r24
    17ec:	fa cf       	rjmp	.-12     	; 0x17e2 <usart_putstring+0x6>
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	24 c0       	rjmp	.+72     	; 0x183c <usart_putstring+0x60>
 *
 *  \return The number of used elements.
 */
static inline uint8_t fifo_get_used_size(fifo_desc_t *fifo_desc)
{
	return ((fifo_desc->write_index - fifo_desc->read_index) & fifo_desc->mask);
    17f4:	e0 e7       	ldi	r30, 0x70	; 112
    17f6:	f0 e2       	ldi	r31, 0x20	; 32
    17f8:	23 81       	ldd	r18, Z+3	; 0x03
    17fa:	82 81       	ldd	r24, Z+2	; 0x02
    17fc:	95 81       	ldd	r25, Z+5	; 0x05
    17fe:	28 1b       	sub	r18, r24
    1800:	29 23       	and	r18, r25
 *    \retval true when the FIFO is full.
 *    \retval false when the FIFO is not full.
 */
static inline bool fifo_is_full(fifo_desc_t *fifo_desc)
{
	return (fifo_get_used_size(fifo_desc) == fifo_desc->size);
    1802:	84 81       	ldd	r24, Z+4	; 0x04
	for(int i = 0; i < strlen(str); i++)
	{
		if(!fifo_is_full(&txfifo_desc))
    1804:	28 17       	cp	r18, r24
    1806:	29 f1       	breq	.+74     	; 0x1852 <usart_putstring+0x76>
		{							
			fifo_push_uint8(&txfifo_desc, str[i]);
    1808:	fd 01       	movw	r30, r26
    180a:	e6 0f       	add	r30, r22
    180c:	f7 1f       	adc	r31, r23
    180e:	60 81       	ld	r22, Z
 *
 *  \return The number of used elements.
 */
static inline uint8_t fifo_get_used_size(fifo_desc_t *fifo_desc)
{
	return ((fifo_desc->write_index - fifo_desc->read_index) & fifo_desc->mask);
    1810:	e0 e7       	ldi	r30, 0x70	; 112
    1812:	f0 e2       	ldi	r31, 0x20	; 32
    1814:	23 81       	ldd	r18, Z+3	; 0x03
    1816:	32 81       	ldd	r19, Z+2	; 0x02
    1818:	23 1b       	sub	r18, r19
    181a:	29 23       	and	r18, r25
 */
static inline int fifo_push_uint8(fifo_desc_t *fifo_desc, uint32_t item)
{
	uint8_t write_index;

	if (fifo_is_full(fifo_desc)) {
    181c:	82 17       	cp	r24, r18
    181e:	61 f0       	breq	.+24     	; 0x1838 <usart_putstring+0x5c>
		return FIFO_ERROR_OVERFLOW;
	}

	write_index = fifo_desc->write_index;
    1820:	83 81       	ldd	r24, Z+3	; 0x03
	fifo_desc->buffer.u8ptr[write_index & (fifo_desc->mask >> 1)] = item;
    1822:	c0 81       	ld	r28, Z
    1824:	d1 81       	ldd	r29, Z+1	; 0x01
    1826:	96 95       	lsr	r25
    1828:	98 23       	and	r25, r24
    182a:	c9 0f       	add	r28, r25
    182c:	d1 1d       	adc	r29, r1
    182e:	68 83       	st	Y, r22
	write_index = (write_index + 1) & fifo_desc->mask;
    1830:	95 81       	ldd	r25, Z+5	; 0x05
    1832:	8f 5f       	subi	r24, 0xFF	; 255
    1834:	89 23       	and	r24, r25

	// Must be the last thing to do.
	barrier();
	fifo_desc->write_index = write_index;
    1836:	83 83       	std	Z+3, r24	; 0x03
}

void usart_putstring(const char str[])
{	
	while(!fifo_is_empty(&txfifo_desc)){}	
	for(int i = 0; i < strlen(str); i++)
    1838:	4f 5f       	subi	r20, 0xFF	; 255
    183a:	5f 4f       	sbci	r21, 0xFF	; 255
    183c:	fd 01       	movw	r30, r26
    183e:	01 90       	ld	r0, Z+
    1840:	00 20       	and	r0, r0
    1842:	e9 f7       	brne	.-6      	; 0x183e <usart_putstring+0x62>
    1844:	31 97       	sbiw	r30, 0x01	; 1
    1846:	ea 1b       	sub	r30, r26
    1848:	fb 0b       	sbc	r31, r27
    184a:	ba 01       	movw	r22, r20
    184c:	4e 17       	cp	r20, r30
    184e:	5f 07       	cpc	r21, r31
    1850:	88 f2       	brcs	.-94     	; 0x17f4 <usart_putstring+0x18>
    1852:	e0 ea       	ldi	r30, 0xA0	; 160
    1854:	fb e0       	ldi	r31, 0x0B	; 11
    1856:	83 81       	ldd	r24, Z+3	; 0x03
    1858:	8c 7f       	andi	r24, 0xFC	; 252
    185a:	81 60       	ori	r24, 0x01	; 1
    185c:	83 83       	std	Z+3, r24	; 0x03
		{
			break;
		}			
	}
	usart_set_dre_interrupt_level(USART_SERIAL, USART_INT_LVL);
}
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <__vector_120>:

//USART0 transmit IT (data register empty)
ISR(USARTF0_DRE_vect)
{
    1864:	1f 92       	push	r1
    1866:	0f 92       	push	r0
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	0f 92       	push	r0
    186c:	11 24       	eor	r1, r1
    186e:	0b b6       	in	r0, 0x3b	; 59
    1870:	0f 92       	push	r0
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	af 93       	push	r26
    1884:	bf 93       	push	r27
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
 *    \retval true when the FIFO is empty.
 *    \retval false when the FIFO is not empty.
 */
static inline bool fifo_is_empty(fifo_desc_t *fifo_desc)
{
	return (fifo_desc->write_index == fifo_desc->read_index);
    188a:	e0 e7       	ldi	r30, 0x70	; 112
    188c:	f0 e2       	ldi	r31, 0x20	; 32
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	82 81       	ldd	r24, Z+2	; 0x02
	if(!fifo_is_empty(&txfifo_desc))
    1892:	98 17       	cp	r25, r24
    1894:	89 f0       	breq	.+34     	; 0x18b8 <__vector_120+0x54>
static inline uint8_t fifo_pull_uint8_nocheck(fifo_desc_t *fifo_desc)
{
	uint8_t read_index;
	uint8_t item;

	read_index = fifo_desc->read_index;
    1896:	92 81       	ldd	r25, Z+2	; 0x02
	item = fifo_desc->buffer.u8ptr[read_index & (fifo_desc->mask >> 1)];
    1898:	a0 81       	ld	r26, Z
    189a:	b1 81       	ldd	r27, Z+1	; 0x01
    189c:	85 81       	ldd	r24, Z+5	; 0x05
    189e:	28 2f       	mov	r18, r24
    18a0:	26 95       	lsr	r18
    18a2:	29 23       	and	r18, r25
    18a4:	a2 0f       	add	r26, r18
    18a6:	b1 1d       	adc	r27, r1
    18a8:	6c 91       	ld	r22, X
	read_index = (read_index + 1) & fifo_desc->mask;
    18aa:	9f 5f       	subi	r25, 0xFF	; 255
    18ac:	89 23       	and	r24, r25

	// Must be the last thing to do.
	barrier();
	fifo_desc->read_index = read_index;
    18ae:	82 83       	std	Z+2, r24	; 0x02
	{
		usart_putchar(USART_SERIAL, fifo_pull_uint8_nocheck(&txfifo_desc));
    18b0:	80 ea       	ldi	r24, 0xA0	; 160
    18b2:	9b e0       	ldi	r25, 0x0B	; 11
    18b4:	9e d0       	rcall	.+316    	; 0x19f2 <usart_putchar>
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <__vector_120+0x5e>
    18b8:	e0 ea       	ldi	r30, 0xA0	; 160
    18ba:	fb e0       	ldi	r31, 0x0B	; 11
    18bc:	83 81       	ldd	r24, Z+3	; 0x03
    18be:	8c 7f       	andi	r24, 0xFC	; 252
    18c0:	83 83       	std	Z+3, r24	; 0x03
	}
	else
	{
		usart_set_dre_interrupt_level(USART_SERIAL, USART_INT_LVL_OFF);	//if FIFO empty, disable transmit IT
	}
}
    18c2:	ff 91       	pop	r31
    18c4:	ef 91       	pop	r30
    18c6:	bf 91       	pop	r27
    18c8:	af 91       	pop	r26
    18ca:	9f 91       	pop	r25
    18cc:	8f 91       	pop	r24
    18ce:	7f 91       	pop	r23
    18d0:	6f 91       	pop	r22
    18d2:	5f 91       	pop	r21
    18d4:	4f 91       	pop	r20
    18d6:	3f 91       	pop	r19
    18d8:	2f 91       	pop	r18
    18da:	0f 90       	pop	r0
    18dc:	0b be       	out	0x3b, r0	; 59
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <__vector_119>:

//USART0 receive IT ()
ISR(USARTF0_RXC_vect)
{
    18e8:	1f 92       	push	r1
    18ea:	0f 92       	push	r0
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	0f 92       	push	r0
    18f0:	11 24       	eor	r1, r1
    18f2:	0b b6       	in	r0, 0x3b	; 59
    18f4:	0f 92       	push	r0
    18f6:	2f 93       	push	r18
    18f8:	3f 93       	push	r19
    18fa:	4f 93       	push	r20
    18fc:	8f 93       	push	r24
    18fe:	9f 93       	push	r25
    1900:	af 93       	push	r26
    1902:	bf 93       	push	r27
    1904:	ef 93       	push	r30
    1906:	ff 93       	push	r31
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1908:	40 91 a0 0b 	lds	r20, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7deba0>
 *
 *  \return The number of used elements.
 */
static inline uint8_t fifo_get_used_size(fifo_desc_t *fifo_desc)
{
	return ((fifo_desc->write_index - fifo_desc->read_index) & fifo_desc->mask);
    190c:	e6 e7       	ldi	r30, 0x76	; 118
    190e:	f0 e2       	ldi	r31, 0x20	; 32
    1910:	83 81       	ldd	r24, Z+3	; 0x03
    1912:	22 81       	ldd	r18, Z+2	; 0x02
    1914:	95 81       	ldd	r25, Z+5	; 0x05
    1916:	82 1b       	sub	r24, r18
    1918:	89 23       	and	r24, r25
 *    \retval true when the FIFO is full.
 *    \retval false when the FIFO is not full.
 */
static inline bool fifo_is_full(fifo_desc_t *fifo_desc)
{
	return (fifo_get_used_size(fifo_desc) == fifo_desc->size);
    191a:	24 81       	ldd	r18, Z+4	; 0x04
	unsigned char datin;
	datin = usart_get(USART_SERIAL);
	if(!fifo_is_full(&rxfifo_desc))
    191c:	82 17       	cp	r24, r18
    191e:	91 f0       	breq	.+36     	; 0x1944 <__vector_119+0x5c>
 *
 *  \return The number of used elements.
 */
static inline uint8_t fifo_get_used_size(fifo_desc_t *fifo_desc)
{
	return ((fifo_desc->write_index - fifo_desc->read_index) & fifo_desc->mask);
    1920:	83 81       	ldd	r24, Z+3	; 0x03
    1922:	32 81       	ldd	r19, Z+2	; 0x02
    1924:	83 1b       	sub	r24, r19
    1926:	89 23       	and	r24, r25
 */
static inline int fifo_push_uint8(fifo_desc_t *fifo_desc, uint32_t item)
{
	uint8_t write_index;

	if (fifo_is_full(fifo_desc)) {
    1928:	28 17       	cp	r18, r24
    192a:	61 f0       	breq	.+24     	; 0x1944 <__vector_119+0x5c>
		return FIFO_ERROR_OVERFLOW;
	}

	write_index = fifo_desc->write_index;
    192c:	83 81       	ldd	r24, Z+3	; 0x03
	fifo_desc->buffer.u8ptr[write_index & (fifo_desc->mask >> 1)] = item;
    192e:	a0 81       	ld	r26, Z
    1930:	b1 81       	ldd	r27, Z+1	; 0x01
    1932:	96 95       	lsr	r25
    1934:	98 23       	and	r25, r24
    1936:	a9 0f       	add	r26, r25
    1938:	b1 1d       	adc	r27, r1
    193a:	4c 93       	st	X, r20
	write_index = (write_index + 1) & fifo_desc->mask;
    193c:	95 81       	ldd	r25, Z+5	; 0x05
    193e:	8f 5f       	subi	r24, 0xFF	; 255
    1940:	89 23       	and	r24, r25

	// Must be the last thing to do.
	barrier();
	fifo_desc->write_index = write_index;
    1942:	83 83       	std	Z+3, r24	; 0x03
	{
		fifo_push_uint8(&rxfifo_desc, datin);
	}
    1944:	ff 91       	pop	r31
    1946:	ef 91       	pop	r30
    1948:	bf 91       	pop	r27
    194a:	af 91       	pop	r26
    194c:	9f 91       	pop	r25
    194e:	8f 91       	pop	r24
    1950:	4f 91       	pop	r20
    1952:	3f 91       	pop	r19
    1954:	2f 91       	pop	r18
    1956:	0f 90       	pop	r0
    1958:	0b be       	out	0x3b, r0	; 59
    195a:	0f 90       	pop	r0
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	0f 90       	pop	r0
    1960:	1f 90       	pop	r1
    1962:	18 95       	reti

00001964 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	1f 92       	push	r1
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    196e:	9f b7       	in	r25, 0x3f	; 63
    1970:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1972:	f8 94       	cli
	return flags;
    1974:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1976:	e8 2f       	mov	r30, r24
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	e0 59       	subi	r30, 0x90	; 144
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	60 95       	com	r22
    1980:	80 81       	ld	r24, Z
    1982:	68 23       	and	r22, r24
    1984:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1986:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1988:	0f 90       	pop	r0
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	08 95       	ret

00001990 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	1f 92       	push	r1
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    199a:	9f b7       	in	r25, 0x3f	; 63
    199c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    199e:	f8 94       	cli
	return flags;
    19a0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    19a2:	e8 2f       	mov	r30, r24
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	e0 59       	subi	r30, 0x90	; 144
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	68 2b       	or	r22, r24
    19ae:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    19b0:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    19b2:	0f 90       	pop	r0
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	08 95       	ret

000019ba <fifo_init>:
 */

#include "fifo.h"

int fifo_init(fifo_desc_t *fifo_desc, void *buffer, uint8_t size)
{
    19ba:	fc 01       	movw	r30, r24
	// ... and must fit in a uint8_t. Since the read and write indexes are using a
	// double-index range implementation, the max FIFO size is thus 128 items.
	Assert (size <= 128);

	// Fifo starts empty.
	fifo_desc->read_index  = 0;
    19bc:	12 82       	std	Z+2, r1	; 0x02
	fifo_desc->write_index = 0;
    19be:	13 82       	std	Z+3, r1	; 0x03

	// Save the size parameter.
	fifo_desc->size = size;
    19c0:	44 83       	std	Z+4, r20	; 0x04

	// Create a mask to speed up the FIFO management (index swapping).
	fifo_desc->mask = (2 * (uint16_t)size) - 1;
    19c2:	44 0f       	add	r20, r20
    19c4:	41 50       	subi	r20, 0x01	; 1
    19c6:	45 83       	std	Z+5, r20	; 0x05

	// Save the buffer pointer.
	fifo_desc->buffer.u8ptr = buffer;
    19c8:	60 83       	st	Z, r22
    19ca:	71 83       	std	Z+1, r23	; 0x01

	return FIFO_OK;
}
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	08 95       	ret

000019d2 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    19d2:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7de1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    19d6:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    19d8:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    19da:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7de1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    19de:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    19e0:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7de1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    19e4:	08 95       	ret

000019e6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    19e6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    19e8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    19ea:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    19ec:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    19ee:	60 83       	st	Z, r22
	ret                             // Return to caller
    19f0:	08 95       	ret

000019f2 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    19f2:	fc 01       	movw	r30, r24
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	95 ff       	sbrs	r25, 5
    19f8:	fd cf       	rjmp	.-6      	; 0x19f4 <usart_putchar+0x2>
    19fa:	60 83       	st	Z, r22
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	08 95       	ret

00001a02 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1a02:	4f 92       	push	r4
    1a04:	5f 92       	push	r5
    1a06:	6f 92       	push	r6
    1a08:	7f 92       	push	r7
    1a0a:	8f 92       	push	r8
    1a0c:	9f 92       	push	r9
    1a0e:	af 92       	push	r10
    1a10:	bf 92       	push	r11
    1a12:	ef 92       	push	r14
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	7c 01       	movw	r14, r24
    1a1e:	4a 01       	movw	r8, r20
    1a20:	5b 01       	movw	r10, r22
    1a22:	28 01       	movw	r4, r16
    1a24:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1a26:	d9 01       	movw	r26, r18
    1a28:	c8 01       	movw	r24, r16
    1a2a:	68 94       	set
    1a2c:	12 f8       	bld	r1, 2
    1a2e:	b6 95       	lsr	r27
    1a30:	a7 95       	ror	r26
    1a32:	97 95       	ror	r25
    1a34:	87 95       	ror	r24
    1a36:	16 94       	lsr	r1
    1a38:	d1 f7       	brne	.-12     	; 0x1a2e <usart_set_baudrate+0x2c>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1a3a:	b9 01       	movw	r22, r18
    1a3c:	a8 01       	movw	r20, r16
    1a3e:	03 2e       	mov	r0, r19
    1a40:	36 e1       	ldi	r19, 0x16	; 22
    1a42:	76 95       	lsr	r23
    1a44:	67 95       	ror	r22
    1a46:	57 95       	ror	r21
    1a48:	47 95       	ror	r20
    1a4a:	3a 95       	dec	r19
    1a4c:	d1 f7       	brne	.-12     	; 0x1a42 <usart_set_baudrate+0x40>
    1a4e:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a50:	f7 01       	movw	r30, r14
    1a52:	24 81       	ldd	r18, Z+4	; 0x04
    1a54:	22 fd       	sbrc	r18, 2
    1a56:	15 c0       	rjmp	.+42     	; 0x1a82 <usart_set_baudrate+0x80>
		max_rate /= 2;
    1a58:	d3 01       	movw	r26, r6
    1a5a:	c2 01       	movw	r24, r4
    1a5c:	68 94       	set
    1a5e:	13 f8       	bld	r1, 3
    1a60:	b6 95       	lsr	r27
    1a62:	a7 95       	ror	r26
    1a64:	97 95       	ror	r25
    1a66:	87 95       	ror	r24
    1a68:	16 94       	lsr	r1
    1a6a:	d1 f7       	brne	.-12     	; 0x1a60 <usart_set_baudrate+0x5e>
		min_rate /= 2;
    1a6c:	b3 01       	movw	r22, r6
    1a6e:	a2 01       	movw	r20, r4
    1a70:	03 2e       	mov	r0, r19
    1a72:	37 e1       	ldi	r19, 0x17	; 23
    1a74:	76 95       	lsr	r23
    1a76:	67 95       	ror	r22
    1a78:	57 95       	ror	r21
    1a7a:	47 95       	ror	r20
    1a7c:	3a 95       	dec	r19
    1a7e:	d1 f7       	brne	.-12     	; 0x1a74 <usart_set_baudrate+0x72>
    1a80:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1a82:	88 15       	cp	r24, r8
    1a84:	99 05       	cpc	r25, r9
    1a86:	aa 05       	cpc	r26, r10
    1a88:	bb 05       	cpc	r27, r11
    1a8a:	08 f4       	brcc	.+2      	; 0x1a8e <usart_set_baudrate+0x8c>
    1a8c:	a1 c0       	rjmp	.+322    	; 0x1bd0 <usart_set_baudrate+0x1ce>
    1a8e:	84 16       	cp	r8, r20
    1a90:	95 06       	cpc	r9, r21
    1a92:	a6 06       	cpc	r10, r22
    1a94:	b7 06       	cpc	r11, r23
    1a96:	08 f4       	brcc	.+2      	; 0x1a9a <usart_set_baudrate+0x98>
    1a98:	9d c0       	rjmp	.+314    	; 0x1bd4 <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a9a:	f7 01       	movw	r30, r14
    1a9c:	84 81       	ldd	r24, Z+4	; 0x04
    1a9e:	82 fd       	sbrc	r24, 2
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <usart_set_baudrate+0xa8>
		baud *= 2;
    1aa2:	88 0c       	add	r8, r8
    1aa4:	99 1c       	adc	r9, r9
    1aa6:	aa 1c       	adc	r10, r10
    1aa8:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1aaa:	c3 01       	movw	r24, r6
    1aac:	b2 01       	movw	r22, r4
    1aae:	a5 01       	movw	r20, r10
    1ab0:	94 01       	movw	r18, r8
    1ab2:	df d1       	rcall	.+958    	; 0x1e72 <__udivmodsi4>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a0 e0       	ldi	r26, 0x00	; 0
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1abc:	c9 ef       	ldi	r28, 0xF9	; 249
    1abe:	0d c0       	rjmp	.+26     	; 0x1ada <usart_set_baudrate+0xd8>
		if (ratio < limit) {
    1ac0:	28 17       	cp	r18, r24
    1ac2:	39 07       	cpc	r19, r25
    1ac4:	4a 07       	cpc	r20, r26
    1ac6:	5b 07       	cpc	r21, r27
    1ac8:	50 f0       	brcs	.+20     	; 0x1ade <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	aa 1f       	adc	r26, r26
    1ad0:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1ad2:	cd 3f       	cpi	r28, 0xFD	; 253
    1ad4:	0c f4       	brge	.+2      	; 0x1ad8 <usart_set_baudrate+0xd6>
			limit |= 1;
    1ad6:	81 60       	ori	r24, 0x01	; 1

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1ad8:	cf 5f       	subi	r28, 0xFF	; 255
    1ada:	c7 30       	cpi	r28, 0x07	; 7
    1adc:	8c f3       	brlt	.-30     	; 0x1ac0 <usart_set_baudrate+0xbe>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1ade:	cc 23       	and	r28, r28
    1ae0:	0c f0       	brlt	.+2      	; 0x1ae4 <usart_set_baudrate+0xe2>
    1ae2:	4d c0       	rjmp	.+154    	; 0x1b7e <usart_set_baudrate+0x17c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1ae4:	d5 01       	movw	r26, r10
    1ae6:	c4 01       	movw	r24, r8
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	aa 1f       	adc	r26, r26
    1aee:	bb 1f       	adc	r27, r27
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	aa 1f       	adc	r26, r26
    1af6:	bb 1f       	adc	r27, r27
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	aa 1f       	adc	r26, r26
    1afe:	bb 1f       	adc	r27, r27
    1b00:	48 1a       	sub	r4, r24
    1b02:	59 0a       	sbc	r5, r25
    1b04:	6a 0a       	sbc	r6, r26
    1b06:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1b08:	ce 3f       	cpi	r28, 0xFE	; 254
    1b0a:	ec f4       	brge	.+58     	; 0x1b46 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1b0c:	8d ef       	ldi	r24, 0xFD	; 253
    1b0e:	9f ef       	ldi	r25, 0xFF	; 255
    1b10:	8c 1b       	sub	r24, r28
    1b12:	91 09       	sbc	r25, r1
    1b14:	c7 fd       	sbrc	r28, 7
    1b16:	93 95       	inc	r25
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <usart_set_baudrate+0x120>
    1b1a:	44 0c       	add	r4, r4
    1b1c:	55 1c       	adc	r5, r5
    1b1e:	66 1c       	adc	r6, r6
    1b20:	77 1c       	adc	r7, r7
    1b22:	8a 95       	dec	r24
    1b24:	d2 f7       	brpl	.-12     	; 0x1b1a <usart_set_baudrate+0x118>
    1b26:	d5 01       	movw	r26, r10
    1b28:	c4 01       	movw	r24, r8
    1b2a:	b6 95       	lsr	r27
    1b2c:	a7 95       	ror	r26
    1b2e:	97 95       	ror	r25
    1b30:	87 95       	ror	r24
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	64 0d       	add	r22, r4
    1b38:	75 1d       	adc	r23, r5
    1b3a:	86 1d       	adc	r24, r6
    1b3c:	97 1d       	adc	r25, r7
    1b3e:	a5 01       	movw	r20, r10
    1b40:	94 01       	movw	r18, r8
    1b42:	97 d1       	rcall	.+814    	; 0x1e72 <__udivmodsi4>
    1b44:	3b c0       	rjmp	.+118    	; 0x1bbc <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
    1b46:	8c 2f       	mov	r24, r28
    1b48:	0c 2e       	mov	r0, r28
    1b4a:	00 0c       	add	r0, r0
    1b4c:	99 0b       	sbc	r25, r25
    1b4e:	03 96       	adiw	r24, 0x03	; 3
    1b50:	a5 01       	movw	r20, r10
    1b52:	94 01       	movw	r18, r8
    1b54:	04 c0       	rjmp	.+8      	; 0x1b5e <usart_set_baudrate+0x15c>
    1b56:	22 0f       	add	r18, r18
    1b58:	33 1f       	adc	r19, r19
    1b5a:	44 1f       	adc	r20, r20
    1b5c:	55 1f       	adc	r21, r21
    1b5e:	8a 95       	dec	r24
    1b60:	d2 f7       	brpl	.-12     	; 0x1b56 <usart_set_baudrate+0x154>
			div = (cpu_hz + baud / 2) / baud;
    1b62:	da 01       	movw	r26, r20
    1b64:	c9 01       	movw	r24, r18
    1b66:	b6 95       	lsr	r27
    1b68:	a7 95       	ror	r26
    1b6a:	97 95       	ror	r25
    1b6c:	87 95       	ror	r24
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	64 0d       	add	r22, r4
    1b74:	75 1d       	adc	r23, r5
    1b76:	86 1d       	adc	r24, r6
    1b78:	97 1d       	adc	r25, r7
    1b7a:	7b d1       	rcall	.+758    	; 0x1e72 <__udivmodsi4>
    1b7c:	1f c0       	rjmp	.+62     	; 0x1bbc <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1b7e:	8c 2f       	mov	r24, r28
    1b80:	0c 2e       	mov	r0, r28
    1b82:	00 0c       	add	r0, r0
    1b84:	99 0b       	sbc	r25, r25
    1b86:	03 96       	adiw	r24, 0x03	; 3
    1b88:	a5 01       	movw	r20, r10
    1b8a:	94 01       	movw	r18, r8
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <usart_set_baudrate+0x194>
    1b8e:	22 0f       	add	r18, r18
    1b90:	33 1f       	adc	r19, r19
    1b92:	44 1f       	adc	r20, r20
    1b94:	55 1f       	adc	r21, r21
    1b96:	8a 95       	dec	r24
    1b98:	d2 f7       	brpl	.-12     	; 0x1b8e <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
    1b9a:	da 01       	movw	r26, r20
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	b6 95       	lsr	r27
    1ba0:	a7 95       	ror	r26
    1ba2:	97 95       	ror	r25
    1ba4:	87 95       	ror	r24
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	64 0d       	add	r22, r4
    1bac:	75 1d       	adc	r23, r5
    1bae:	86 1d       	adc	r24, r6
    1bb0:	97 1d       	adc	r25, r7
    1bb2:	5f d1       	rcall	.+702    	; 0x1e72 <__udivmodsi4>
    1bb4:	21 50       	subi	r18, 0x01	; 1
    1bb6:	31 09       	sbc	r19, r1
    1bb8:	41 09       	sbc	r20, r1
    1bba:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1bbc:	83 2f       	mov	r24, r19
    1bbe:	8f 70       	andi	r24, 0x0F	; 15
    1bc0:	c2 95       	swap	r28
    1bc2:	c0 7f       	andi	r28, 0xF0	; 240
    1bc4:	c8 2b       	or	r28, r24
    1bc6:	f7 01       	movw	r30, r14
    1bc8:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1bca:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	03 c0       	rjmp	.+6      	; 0x1bd6 <usart_set_baudrate+0x1d4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <usart_set_baudrate+0x1d4>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	bf 90       	pop	r11
    1be2:	af 90       	pop	r10
    1be4:	9f 90       	pop	r9
    1be6:	8f 90       	pop	r8
    1be8:	7f 90       	pop	r7
    1bea:	6f 90       	pop	r6
    1bec:	5f 90       	pop	r5
    1bee:	4f 90       	pop	r4
    1bf0:	08 95       	ret

00001bf2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	ec 01       	movw	r28, r24
    1bfc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <usart_init_rs232+0x12>
    1c02:	fe c0       	rjmp	.+508    	; 0x1e00 <usart_init_rs232+0x20e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1c04:	80 3c       	cpi	r24, 0xC0	; 192
    1c06:	91 05       	cpc	r25, r1
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1c0a:	60 e1       	ldi	r22, 0x10	; 16
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	aa de       	rcall	.-684    	; 0x1964 <sysclk_enable_module>
    1c10:	f7 c0       	rjmp	.+494    	; 0x1e00 <usart_init_rs232+0x20e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1c12:	c1 15       	cp	r28, r1
    1c14:	84 e0       	ldi	r24, 0x04	; 4
    1c16:	d8 07       	cpc	r29, r24
    1c18:	21 f4       	brne	.+8      	; 0x1c22 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1c1a:	64 e0       	ldi	r22, 0x04	; 4
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	a2 de       	rcall	.-700    	; 0x1964 <sysclk_enable_module>
    1c20:	ef c0       	rjmp	.+478    	; 0x1e00 <usart_init_rs232+0x20e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1c22:	c0 38       	cpi	r28, 0x80	; 128
    1c24:	e1 e0       	ldi	r30, 0x01	; 1
    1c26:	de 07       	cpc	r29, r30
    1c28:	21 f4       	brne	.+8      	; 0x1c32 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1c2a:	62 e0       	ldi	r22, 0x02	; 2
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	9a de       	rcall	.-716    	; 0x1964 <sysclk_enable_module>
    1c30:	e7 c0       	rjmp	.+462    	; 0x1e00 <usart_init_rs232+0x20e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1c32:	c1 15       	cp	r28, r1
    1c34:	f1 e0       	ldi	r31, 0x01	; 1
    1c36:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1c38:	21 f4       	brne	.+8      	; 0x1c42 <usart_init_rs232+0x50>
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	92 de       	rcall	.-732    	; 0x1964 <sysclk_enable_module>
    1c40:	df c0       	rjmp	.+446    	; 0x1e00 <usart_init_rs232+0x20e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1c42:	c0 38       	cpi	r28, 0x80	; 128
    1c44:	83 e0       	ldi	r24, 0x03	; 3
    1c46:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1c48:	21 f4       	brne	.+8      	; 0x1c52 <usart_init_rs232+0x60>
    1c4a:	61 e0       	ldi	r22, 0x01	; 1
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	8a de       	rcall	.-748    	; 0x1964 <sysclk_enable_module>
    1c50:	d7 c0       	rjmp	.+430    	; 0x1e00 <usart_init_rs232+0x20e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1c52:	c0 39       	cpi	r28, 0x90	; 144
    1c54:	e3 e0       	ldi	r30, 0x03	; 3
    1c56:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1c58:	21 f4       	brne	.+8      	; 0x1c62 <usart_init_rs232+0x70>
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	82 de       	rcall	.-764    	; 0x1964 <sysclk_enable_module>
    1c60:	cf c0       	rjmp	.+414    	; 0x1e00 <usart_init_rs232+0x20e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1c62:	c1 15       	cp	r28, r1
    1c64:	f2 e0       	ldi	r31, 0x02	; 2
    1c66:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1c68:	21 f4       	brne	.+8      	; 0x1c72 <usart_init_rs232+0x80>
    1c6a:	62 e0       	ldi	r22, 0x02	; 2
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	7a de       	rcall	.-780    	; 0x1964 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1c70:	c7 c0       	rjmp	.+398    	; 0x1e00 <usart_init_rs232+0x20e>
    1c72:	c0 34       	cpi	r28, 0x40	; 64
    1c74:	82 e0       	ldi	r24, 0x02	; 2
    1c76:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1c78:	21 f4       	brne	.+8      	; 0x1c82 <usart_init_rs232+0x90>
    1c7a:	62 e0       	ldi	r22, 0x02	; 2
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	72 de       	rcall	.-796    	; 0x1964 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1c80:	bf c0       	rjmp	.+382    	; 0x1e00 <usart_init_rs232+0x20e>
    1c82:	c0 32       	cpi	r28, 0x20	; 32
    1c84:	e3 e0       	ldi	r30, 0x03	; 3
    1c86:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1c88:	21 f4       	brne	.+8      	; 0x1c92 <usart_init_rs232+0xa0>
    1c8a:	64 e0       	ldi	r22, 0x04	; 4
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	6a de       	rcall	.-812    	; 0x1964 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1c90:	b7 c0       	rjmp	.+366    	; 0x1e00 <usart_init_rs232+0x20e>
    1c92:	c1 15       	cp	r28, r1
    1c94:	f8 e0       	ldi	r31, 0x08	; 8
    1c96:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1c98:	21 f4       	brne	.+8      	; 0x1ca2 <usart_init_rs232+0xb0>
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	62 de       	rcall	.-828    	; 0x1964 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1ca0:	af c0       	rjmp	.+350    	; 0x1e00 <usart_init_rs232+0x20e>
    1ca2:	c1 15       	cp	r28, r1
    1ca4:	89 e0       	ldi	r24, 0x09	; 9
    1ca6:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1ca8:	21 f4       	brne	.+8      	; 0x1cb2 <usart_init_rs232+0xc0>
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	84 e0       	ldi	r24, 0x04	; 4
    1cae:	5a de       	rcall	.-844    	; 0x1964 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1cb0:	a7 c0       	rjmp	.+334    	; 0x1e00 <usart_init_rs232+0x20e>
    1cb2:	c1 15       	cp	r28, r1
    1cb4:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1cb6:	de 07       	cpc	r29, r30
    1cb8:	21 f4       	brne	.+8      	; 0x1cc2 <usart_init_rs232+0xd0>
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	85 e0       	ldi	r24, 0x05	; 5
    1cbe:	52 de       	rcall	.-860    	; 0x1964 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1cc0:	9f c0       	rjmp	.+318    	; 0x1e00 <usart_init_rs232+0x20e>
    1cc2:	c1 15       	cp	r28, r1
    1cc4:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1cc6:	df 07       	cpc	r29, r31
    1cc8:	21 f4       	brne	.+8      	; 0x1cd2 <usart_init_rs232+0xe0>
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	86 e0       	ldi	r24, 0x06	; 6
    1cce:	4a de       	rcall	.-876    	; 0x1964 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1cd0:	97 c0       	rjmp	.+302    	; 0x1e00 <usart_init_rs232+0x20e>
    1cd2:	c0 34       	cpi	r28, 0x40	; 64
    1cd4:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1cd6:	d8 07       	cpc	r29, r24
    1cd8:	21 f4       	brne	.+8      	; 0x1ce2 <usart_init_rs232+0xf0>
    1cda:	62 e0       	ldi	r22, 0x02	; 2
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	42 de       	rcall	.-892    	; 0x1964 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1ce0:	8f c0       	rjmp	.+286    	; 0x1e00 <usart_init_rs232+0x20e>
    1ce2:	c0 34       	cpi	r28, 0x40	; 64
    1ce4:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1ce6:	de 07       	cpc	r29, r30
    1ce8:	21 f4       	brne	.+8      	; 0x1cf2 <usart_init_rs232+0x100>
    1cea:	62 e0       	ldi	r22, 0x02	; 2
    1cec:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1cee:	3a de       	rcall	.-908    	; 0x1964 <sysclk_enable_module>
    1cf0:	87 c0       	rjmp	.+270    	; 0x1e00 <usart_init_rs232+0x20e>
    1cf2:	c0 34       	cpi	r28, 0x40	; 64
    1cf4:	fa e0       	ldi	r31, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1cf6:	df 07       	cpc	r29, r31
    1cf8:	21 f4       	brne	.+8      	; 0x1d02 <usart_init_rs232+0x110>
    1cfa:	62 e0       	ldi	r22, 0x02	; 2
    1cfc:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1cfe:	32 de       	rcall	.-924    	; 0x1964 <sysclk_enable_module>
    1d00:	7f c0       	rjmp	.+254    	; 0x1e00 <usart_init_rs232+0x20e>
    1d02:	c0 39       	cpi	r28, 0x90	; 144
    1d04:	88 e0       	ldi	r24, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1d06:	d8 07       	cpc	r29, r24
    1d08:	21 f4       	brne	.+8      	; 0x1d12 <usart_init_rs232+0x120>
    1d0a:	64 e0       	ldi	r22, 0x04	; 4
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1d0e:	2a de       	rcall	.-940    	; 0x1964 <sysclk_enable_module>
    1d10:	77 c0       	rjmp	.+238    	; 0x1e00 <usart_init_rs232+0x20e>
    1d12:	c0 39       	cpi	r28, 0x90	; 144
    1d14:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1d16:	de 07       	cpc	r29, r30
    1d18:	21 f4       	brne	.+8      	; 0x1d22 <usart_init_rs232+0x130>
    1d1a:	64 e0       	ldi	r22, 0x04	; 4
    1d1c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1d1e:	22 de       	rcall	.-956    	; 0x1964 <sysclk_enable_module>
    1d20:	6f c0       	rjmp	.+222    	; 0x1e00 <usart_init_rs232+0x20e>
    1d22:	c0 39       	cpi	r28, 0x90	; 144
    1d24:	fa e0       	ldi	r31, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1d26:	df 07       	cpc	r29, r31
    1d28:	21 f4       	brne	.+8      	; 0x1d32 <usart_init_rs232+0x140>
    1d2a:	64 e0       	ldi	r22, 0x04	; 4
    1d2c:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1d2e:	1a de       	rcall	.-972    	; 0x1964 <sysclk_enable_module>
    1d30:	67 c0       	rjmp	.+206    	; 0x1e00 <usart_init_rs232+0x20e>
    1d32:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1d34:	8b e0       	ldi	r24, 0x0B	; 11
    1d36:	d8 07       	cpc	r29, r24
    1d38:	21 f4       	brne	.+8      	; 0x1d42 <usart_init_rs232+0x150>
    1d3a:	64 e0       	ldi	r22, 0x04	; 4
    1d3c:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1d3e:	12 de       	rcall	.-988    	; 0x1964 <sysclk_enable_module>
    1d40:	5f c0       	rjmp	.+190    	; 0x1e00 <usart_init_rs232+0x20e>
    1d42:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1d44:	e8 e0       	ldi	r30, 0x08	; 8
    1d46:	de 07       	cpc	r29, r30
    1d48:	21 f4       	brne	.+8      	; 0x1d52 <usart_init_rs232+0x160>
    1d4a:	68 e0       	ldi	r22, 0x08	; 8
    1d4c:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1d4e:	0a de       	rcall	.-1004   	; 0x1964 <sysclk_enable_module>
    1d50:	57 c0       	rjmp	.+174    	; 0x1e00 <usart_init_rs232+0x20e>
    1d52:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1d54:	f9 e0       	ldi	r31, 0x09	; 9
    1d56:	df 07       	cpc	r29, r31
    1d58:	21 f4       	brne	.+8      	; 0x1d62 <usart_init_rs232+0x170>
    1d5a:	68 e0       	ldi	r22, 0x08	; 8
    1d5c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1d5e:	02 de       	rcall	.-1020   	; 0x1964 <sysclk_enable_module>
    1d60:	4f c0       	rjmp	.+158    	; 0x1e00 <usart_init_rs232+0x20e>
    1d62:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1d64:	8a e0       	ldi	r24, 0x0A	; 10
    1d66:	d8 07       	cpc	r29, r24
    1d68:	21 f4       	brne	.+8      	; 0x1d72 <usart_init_rs232+0x180>
    1d6a:	68 e0       	ldi	r22, 0x08	; 8
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1d6c:	85 e0       	ldi	r24, 0x05	; 5
    1d6e:	fa dd       	rcall	.-1036   	; 0x1964 <sysclk_enable_module>
    1d70:	47 c0       	rjmp	.+142    	; 0x1e00 <usart_init_rs232+0x20e>
    1d72:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1d74:	e8 e0       	ldi	r30, 0x08	; 8
    1d76:	de 07       	cpc	r29, r30
    1d78:	21 f4       	brne	.+8      	; 0x1d82 <usart_init_rs232+0x190>
    1d7a:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	f2 dd       	rcall	.-1052   	; 0x1964 <sysclk_enable_module>
    1d80:	3f c0       	rjmp	.+126    	; 0x1e00 <usart_init_rs232+0x20e>
    1d82:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1d84:	f9 e0       	ldi	r31, 0x09	; 9
    1d86:	df 07       	cpc	r29, r31
    1d88:	21 f4       	brne	.+8      	; 0x1d92 <usart_init_rs232+0x1a0>
    1d8a:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1d8c:	84 e0       	ldi	r24, 0x04	; 4
    1d8e:	ea dd       	rcall	.-1068   	; 0x1964 <sysclk_enable_module>
    1d90:	37 c0       	rjmp	.+110    	; 0x1e00 <usart_init_rs232+0x20e>
    1d92:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1d94:	8a e0       	ldi	r24, 0x0A	; 10
    1d96:	d8 07       	cpc	r29, r24
    1d98:	21 f4       	brne	.+8      	; 0x1da2 <usart_init_rs232+0x1b0>
    1d9a:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1d9c:	85 e0       	ldi	r24, 0x05	; 5
    1d9e:	e2 dd       	rcall	.-1084   	; 0x1964 <sysclk_enable_module>
    1da0:	2f c0       	rjmp	.+94     	; 0x1e00 <usart_init_rs232+0x20e>
    1da2:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1da4:	eb e0       	ldi	r30, 0x0B	; 11
    1da6:	de 07       	cpc	r29, r30
    1da8:	21 f4       	brne	.+8      	; 0x1db2 <usart_init_rs232+0x1c0>
    1daa:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1dac:	86 e0       	ldi	r24, 0x06	; 6
    1dae:	da dd       	rcall	.-1100   	; 0x1964 <sysclk_enable_module>
    1db0:	27 c0       	rjmp	.+78     	; 0x1e00 <usart_init_rs232+0x20e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1db2:	c0 3b       	cpi	r28, 0xB0	; 176
    1db4:	f8 e0       	ldi	r31, 0x08	; 8
    1db6:	df 07       	cpc	r29, r31
    1db8:	21 f4       	brne	.+8      	; 0x1dc2 <usart_init_rs232+0x1d0>
    1dba:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1dbc:	83 e0       	ldi	r24, 0x03	; 3
    1dbe:	d2 dd       	rcall	.-1116   	; 0x1964 <sysclk_enable_module>
    1dc0:	1f c0       	rjmp	.+62     	; 0x1e00 <usart_init_rs232+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1dc2:	c0 3b       	cpi	r28, 0xB0	; 176
    1dc4:	89 e0       	ldi	r24, 0x09	; 9
    1dc6:	d8 07       	cpc	r29, r24
    1dc8:	21 f4       	brne	.+8      	; 0x1dd2 <usart_init_rs232+0x1e0>
    1dca:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1dcc:	84 e0       	ldi	r24, 0x04	; 4
    1dce:	ca dd       	rcall	.-1132   	; 0x1964 <sysclk_enable_module>
    1dd0:	17 c0       	rjmp	.+46     	; 0x1e00 <usart_init_rs232+0x20e>
    1dd2:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1dd4:	ea e0       	ldi	r30, 0x0A	; 10
    1dd6:	de 07       	cpc	r29, r30
    1dd8:	21 f4       	brne	.+8      	; 0x1de2 <usart_init_rs232+0x1f0>
    1dda:	60 e2       	ldi	r22, 0x20	; 32
    1ddc:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1dde:	c2 dd       	rcall	.-1148   	; 0x1964 <sysclk_enable_module>
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <usart_init_rs232+0x20e>
    1de2:	c0 38       	cpi	r28, 0x80	; 128
    1de4:	f4 e0       	ldi	r31, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1de6:	df 07       	cpc	r29, r31
    1de8:	21 f4       	brne	.+8      	; 0x1df2 <usart_init_rs232+0x200>
    1dea:	60 e4       	ldi	r22, 0x40	; 64
    1dec:	83 e0       	ldi	r24, 0x03	; 3
    1dee:	ba dd       	rcall	.-1164   	; 0x1964 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1df0:	07 c0       	rjmp	.+14     	; 0x1e00 <usart_init_rs232+0x20e>
    1df2:	c0 3a       	cpi	r28, 0xA0	; 160
    1df4:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1df6:	d8 07       	cpc	r29, r24
    1df8:	19 f4       	brne	.+6      	; 0x1e00 <usart_init_rs232+0x20e>
    1dfa:	60 e4       	ldi	r22, 0x40	; 64
    1dfc:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1dfe:	b2 dd       	rcall	.-1180   	; 0x1964 <sysclk_enable_module>
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	8f 73       	andi	r24, 0x3F	; 63
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
    1e04:	8d 83       	std	Y+5, r24	; 0x05
    1e06:	f8 01       	movw	r30, r16
    1e08:	96 81       	ldd	r25, Z+6	; 0x06
    1e0a:	25 81       	ldd	r18, Z+5	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1e0c:	84 81       	ldd	r24, Z+4	; 0x04
    1e0e:	82 2b       	or	r24, r18
    1e10:	99 23       	and	r25, r25
    1e12:	11 f0       	breq	.+4      	; 0x1e18 <usart_init_rs232+0x226>
    1e14:	98 e0       	ldi	r25, 0x08	; 8
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <usart_init_rs232+0x228>
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	89 2b       	or	r24, r25
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	f8 01       	movw	r30, r16
    1e20:	40 81       	ld	r20, Z
    1e22:	51 81       	ldd	r21, Z+1	; 0x01
    1e24:	62 81       	ldd	r22, Z+2	; 0x02
    1e26:	73 81       	ldd	r23, Z+3	; 0x03
    1e28:	00 e0       	ldi	r16, 0x00	; 0
    1e2a:	1b e1       	ldi	r17, 0x1B	; 27
    1e2c:	27 eb       	ldi	r18, 0xB7	; 183
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	ce 01       	movw	r24, r28
    1e32:	e7 dd       	rcall	.-1074   	; 0x1a02 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	98 60       	ori	r25, 0x08	; 8
    1e38:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	90 61       	ori	r25, 0x10	; 16
    1e3e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <__udivmodhi4>:
    1e4a:	aa 1b       	sub	r26, r26
    1e4c:	bb 1b       	sub	r27, r27
    1e4e:	51 e1       	ldi	r21, 0x11	; 17
    1e50:	07 c0       	rjmp	.+14     	; 0x1e60 <__udivmodhi4_ep>

00001e52 <__udivmodhi4_loop>:
    1e52:	aa 1f       	adc	r26, r26
    1e54:	bb 1f       	adc	r27, r27
    1e56:	a6 17       	cp	r26, r22
    1e58:	b7 07       	cpc	r27, r23
    1e5a:	10 f0       	brcs	.+4      	; 0x1e60 <__udivmodhi4_ep>
    1e5c:	a6 1b       	sub	r26, r22
    1e5e:	b7 0b       	sbc	r27, r23

00001e60 <__udivmodhi4_ep>:
    1e60:	88 1f       	adc	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	5a 95       	dec	r21
    1e66:	a9 f7       	brne	.-22     	; 0x1e52 <__udivmodhi4_loop>
    1e68:	80 95       	com	r24
    1e6a:	90 95       	com	r25
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	08 95       	ret

00001e72 <__udivmodsi4>:
    1e72:	a1 e2       	ldi	r26, 0x21	; 33
    1e74:	1a 2e       	mov	r1, r26
    1e76:	aa 1b       	sub	r26, r26
    1e78:	bb 1b       	sub	r27, r27
    1e7a:	fd 01       	movw	r30, r26
    1e7c:	0d c0       	rjmp	.+26     	; 0x1e98 <__udivmodsi4_ep>

00001e7e <__udivmodsi4_loop>:
    1e7e:	aa 1f       	adc	r26, r26
    1e80:	bb 1f       	adc	r27, r27
    1e82:	ee 1f       	adc	r30, r30
    1e84:	ff 1f       	adc	r31, r31
    1e86:	a2 17       	cp	r26, r18
    1e88:	b3 07       	cpc	r27, r19
    1e8a:	e4 07       	cpc	r30, r20
    1e8c:	f5 07       	cpc	r31, r21
    1e8e:	20 f0       	brcs	.+8      	; 0x1e98 <__udivmodsi4_ep>
    1e90:	a2 1b       	sub	r26, r18
    1e92:	b3 0b       	sbc	r27, r19
    1e94:	e4 0b       	sbc	r30, r20
    1e96:	f5 0b       	sbc	r31, r21

00001e98 <__udivmodsi4_ep>:
    1e98:	66 1f       	adc	r22, r22
    1e9a:	77 1f       	adc	r23, r23
    1e9c:	88 1f       	adc	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	1a 94       	dec	r1
    1ea2:	69 f7       	brne	.-38     	; 0x1e7e <__udivmodsi4_loop>
    1ea4:	60 95       	com	r22
    1ea6:	70 95       	com	r23
    1ea8:	80 95       	com	r24
    1eaa:	90 95       	com	r25
    1eac:	9b 01       	movw	r18, r22
    1eae:	ac 01       	movw	r20, r24
    1eb0:	bd 01       	movw	r22, r26
    1eb2:	cf 01       	movw	r24, r30
    1eb4:	08 95       	ret

00001eb6 <strcat>:
    1eb6:	fb 01       	movw	r30, r22
    1eb8:	dc 01       	movw	r26, r24
    1eba:	0d 90       	ld	r0, X+
    1ebc:	00 20       	and	r0, r0
    1ebe:	e9 f7       	brne	.-6      	; 0x1eba <strcat+0x4>
    1ec0:	11 97       	sbiw	r26, 0x01	; 1
    1ec2:	01 90       	ld	r0, Z+
    1ec4:	0d 92       	st	X+, r0
    1ec6:	00 20       	and	r0, r0
    1ec8:	e1 f7       	brne	.-8      	; 0x1ec2 <strcat+0xc>
    1eca:	08 95       	ret

00001ecc <_exit>:
    1ecc:	f8 94       	cli

00001ece <__stop_program>:
    1ece:	ff cf       	rjmp	.-2      	; 0x1ece <__stop_program>
